#!/usr/bin/env python3

from sys import argv
from collections import OrderedDict
import re
import msgpack  # way faster than pickle


class Message:
    def __init__(self, name, section, index):
        self.name = name
        self.section = section
        self.index = index

        self.bytes = []  # XXX: bytearray would be better


def try_convert_int(s):
    try:
        return int(s, base=0)
    except:
        return s


def parse_command(source):
    if source[0] != "[":
        return None, [], {}, source
    source = source[1:]  # "["

    inside_brackets = ""
    while source[0] != "]":
        if source[0] == "\n":
            return None, [], {}, source

        inside_brackets += source[0]
        source = source[1:]
    source = source[1:]  # "]"

    command, *raw_args = inside_brackets.split(" ")

    args = []
    named_args = {}

    for arg in raw_args:
        if "=" in arg:
            key, value = arg.split("=", 1)

            if "," in value:
                named_args[key.lower()] = [try_convert_int(v) for v in value.lower().split(",")]
            else:
                named_args[key.lower()] = try_convert_int(value.lower())
        else:
            if "," in arg:
                args.append([try_convert_int(value) for value in arg.lower().split(",")])
            else:
                args.append(try_convert_int(arg.lower()))

    # args = []
    # for arg in raw_args:
    #     args.append(try_convert_int(arg.lower()))

    return command.lower(), args, named_args, source


def color_to_code(color, style):
    COLORS = {
        "diary": {
            "normal": 0x00,
            "red": 0x07,
        },
        "inspect": {
            "dark": 0x17,
        },
        "button": {
            "blue": 0x10,
            "green": 0x11,
            "red": 0x12,
            "yellow": 0x13,
            "gray": 0x14,
            "grey": 0x14,
        },
        "popup": {
            "red": 0x28,
            "pink": 0x29,
            "purple": 0x2A,
            "blue": 0x2B,
            "teal": 0x2C,
            "green": 0x2D,
            "yellow": 0x2E,
            "normal": 0x2F,
        },
        "sign": {
            "normal": 0x18,
            "red": 0x19,
            "blue": 0x1A,
            "green": 0x1B,
        },
    }

    if type(color) is int:
        return color

    return COLORS.get(
        style,
        {
            # [style:left], [style:right]
            "normal": 0x0A,
            "red": 0x20,
            "pink": 0x21,
            "purple": 0x22,
            "blue": 0x23,
            "cyan": 0x24,
            "green": 0x25,
            "yellow": 0x26,
        },
    ).get(color)


CHARSET_STANDARD = {
    # "ùÖ†": 0x00,
    "!": 0x01,
    '"': 0x02,
    "#": 0x03,
    "$": 0x04,
    "%": 0x05,
    "&": 0x06,
    "'": 0x07,
    "(": 0x08,
    ")": 0x09,
    "*": 0x0A,
    "+": 0x0B,
    ",": 0x0C,
    "-": 0x0D,
    ".": 0x0E,
    "/": 0x0F,
    "0": 0x10,
    "1": 0x11,
    "2": 0x12,
    "3": 0x13,
    "4": 0x14,
    "5": 0x15,
    "6": 0x16,
    "7": 0x17,
    "8": 0x18,
    "9": 0x19,
    ":": 0x1A,
    ";": 0x1B,
    "<": 0x1C,
    "=": 0x1D,
    ">": 0x1E,
    "?": 0x1F,
    "@": 0x20,
    "A": 0x21,
    "B": 0x22,
    "C": 0x23,
    "D": 0x24,
    "E": 0x25,
    "F": 0x26,
    "G": 0x27,
    "H": 0x28,
    "I": 0x29,
    "J": 0x2A,
    "K": 0x2B,
    "L": 0x2C,
    "M": 0x2D,
    "N": 0x2E,
    "O": 0x2F,
    "P": 0x30,
    "Q": 0x31,
    "R": 0x32,
    "S": 0x33,
    "T": 0x34,
    "U": 0x35,
    "V": 0x36,
    "W": 0x37,
    "X": 0x38,
    "Y": 0x39,
    "Z": 0x3A,
    "[": 0x3B,
    "¬•": 0x3C,
    "]": 0x3D,
    "^": 0x3E,
    "_": 0x3F,
    "`": 0x40,
    "a": 0x41,
    "b": 0x42,
    "c": 0x43,
    "d": 0x44,
    "e": 0x45,
    "f": 0x46,
    "g": 0x47,
    "h": 0x48,
    "i": 0x49,
    "j": 0x4A,
    "k": 0x4B,
    "l": 0x4C,
    "m": 0x4D,
    "n": 0x4E,
    "o": 0x4F,
    "p": 0x50,
    "q": 0x51,
    "r": 0x52,
    "s": 0x53,
    "t": 0x54,
    "u": 0x55,
    "v": 0x56,
    "w": 0x57,
    "x": 0x58,
    "y": 0x59,
    "z": 0x5A,
    "{": 0x5B,
    "|": 0x5C,
    "}": 0x5D,
    "~": 0x5E,
    "¬∞": 0x5F,
    "√Ä": 0x60,
    "√Å": 0x61,
    "√Ç": 0x62,
    "√Ñ": 0x63,
    "√á": 0x64,
    "√à": 0x65,
    "√â": 0x66,
    "√ä": 0x67,
    "√ã": 0x68,
    "√å": 0x69,
    "√ç": 0x6A,
    "√é": 0x6B,
    "√è": 0x6C,
    "√ë": 0x6D,
    "√í": 0x6E,
    "√ì": 0x6F,
    "√î": 0x70,
    "√ñ": 0x71,
    "√ô": 0x72,
    "√ö": 0x73,
    "√õ": 0x74,
    "√ú": 0x75,
    "√ü": 0x76,
    "√†": 0x77,
    "√°": 0x78,
    "√¢": 0x79,
    "√§": 0x7A,
    "√ß": 0x7B,
    "√®": 0x7C,
    "√©": 0x7D,
    "√™": 0x7E,
    "√´": 0x7F,
    "√¨": 0x80,
    "√≠": 0x81,
    "√Æ": 0x82,
    "√Ø": 0x83,
    "√±": 0x84,
    "√≤": 0x85,
    "√≥": 0x86,
    "√¥": 0x87,
    "√∂": 0x88,
    "√π": 0x89,
    "√∫": 0x8A,
    "√ª": 0x8B,
    "√º": 0x8C,
    "¬°": 0x8D,
    "¬ø": 0x8E,
    "¬™": 0x8F,
    # "‚ô•": 0x90,
    # "‚òÖ": 0x91,
    # "‚Üë": 0x92,
    # "‚Üì": 0x93,
    # "‚Üê": 0x94,
    # "‚Üí": 0x95,
    # "‚óè": 0x96,
    # "‚úñ": 0x97,
    "‚Äú": 0xA2,
    "‚Äù": 0xA3,
    "‚Äò": 0xA4,
    "‚Äô": 0xA5,
    " ": 0xF7,
    "„ÄÄ": 0xF7,
    # "‚í∂": [0xFF, 0x24, 0xFF, 0x05, 0x10, 0x98, 0xFF, 0x25],
    # "‚í∑": [0xFF, 0x24, 0xFF, 0x05, 0x11, 0x99, 0xFF, 0x25],
    # "‚ìà": [0xFF, 0x24, 0xFF, 0x05, 0x12, 0xA1, 0xFF, 0x25],
    # "‚ñ≤": [0xFF, 0x24, 0xFF, 0x05, 0x13, 0x9D, 0xFF, 0x25],
    # "‚ñº": [0xFF, 0x24, 0xFF, 0x05, 0x13, 0x9E, 0xFF, 0x25],
    # "‚óÄ": [0xFF, 0x24, 0xFF, 0x05, 0x13, 0x9F, 0xFF, 0x25],
    # "‚ñ∂": [0xFF, 0x24, 0xFF, 0x05, 0x13, 0xA0, 0xFF, 0x25],
    # "‚ìÅ": [0xFF, 0x24, 0xFF, 0x05, 0x14, 0x9A, 0xFF, 0x25],
    # "‚ìá": [0xFF, 0x24, 0xFF, 0x05, 0x14, 0x9B, 0xFF, 0x25],
    # "‚ìè": [0xFF, 0x24, 0xFF, 0x05, 0x14, 0x9C, 0xFF, 0x25],
}

CHARSET_CREDITS = {
    "A": 0x00,
    "B": 0x01,
    "C": 0x02,
    "D": 0x03,
    "E": 0x04,
    "F": 0x05,
    "G": 0x06,
    "H": 0x07,
    "I": 0x08,
    "J": 0x09,
    "K": 0x0A,
    "L": 0x0B,
    "M": 0x0C,
    "N": 0x0D,
    "O": 0x0E,
    "P": 0x0F,
    "Q": 0x10,
    "R": 0x11,
    "S": 0x12,
    "T": 0x13,
    "U": 0x14,
    "V": 0x15,
    "W": 0x16,
    "X": 0x17,
    "Y": 0x18,
    "Z": 0x19,
    "'": 0x1A,
    ".": 0x1B,
    ",": 0x1C,
    "0": 0x1D,
    "1": 0x1E,
    "2": 0x1F,
    "3": 0x20,
    "4": 0x21,
    "5": 0x22,
    "6": 0x23,
    "7": 0x24,
    "8": 0x25,
    "9": 0x26,
    "¬©": 0x27,
    "&": 0x28,
    " ": 0xF7,
    "„ÄÄ": 0xF8,
}

CHARSET_KANA = {
    "„ÅÇ": 0x00,
    "„ÅÑ": 0x01,
    "„ÅÜ": 0x02,
    "„Åà": 0x03,
    "„Åä": 0x04,
    "„Åã": 0x05,
    "„Åç": 0x06,
    "„Åè": 0x07,
    "„Åë": 0x08,
    "„Åì": 0x09,
    "„Åï": 0x0A,
    "„Åó": 0x0B,
    "„Åô": 0x0C,
    "„Åõ": 0x0D,
    "„Åù": 0x0E,
    "„Åü": 0x0F,
    "„Å°": 0x10,
    "„Å§": 0x11,
    "„Å¶": 0x12,
    "„Å®": 0x13,
    "„Å™": 0x14,
    "„Å´": 0x15,
    "„Å¨": 0x16,
    "„Å≠": 0x17,
    "„ÅÆ": 0x18,
    "„ÅØ": 0x19,
    "„Å≤": 0x1A,
    "„Åµ": 0x1B,
    "„Å∏": 0x1C,
    "„Åª": 0x1D,
    "„Åæ": 0x1E,
    "„Åø": 0x1F,
    "„ÇÄ": 0x20,
    "„ÇÅ": 0x21,
    "„ÇÇ": 0x22,
    "„ÇÑ": 0x23,
    "„ÇÜ": 0x24,
    "„Çà": 0x25,
    "„Çâ": 0x26,
    "„Çä": 0x27,
    "„Çã": 0x28,
    "„Çå": 0x29,
    "„Çç": 0x2A,
    "„Çè": 0x2B,
    "„Çí": 0x2C,
    "„Çì": 0x2D,
    "„Çî": 0x2E,
    "„Åå": 0x2F,
    "„Åé": 0x30,
    "„Åê": 0x31,
    "„Åí": 0x32,
    "„Åî": 0x33,
    "„Åñ": 0x34,
    "„Åò": 0x35,
    "„Åö": 0x36,
    "„Åú": 0x37,
    "„Åû": 0x38,
    "„Å†": 0x39,
    "„Å¢": 0x3A,
    "„Å•": 0x3B,
    "„Åß": 0x3C,
    "„Å©": 0x3D,
    "„Å∞": 0x3E,
    "„Å≥": 0x3F,
    "„Å∂": 0x40,
    "„Åπ": 0x41,
    "„Åº": 0x42,
    "„Å±": 0x43,
    "„Å¥": 0x44,
    "„Å∑": 0x45,
    "„Å∫": 0x46,
    "„ÅΩ": 0x47,
    "„ÅÅ": 0x48,
    "„ÅÉ": 0x49,
    "„ÅÖ": 0x4A,
    "„Åá": 0x4B,
    "„Åâ": 0x4C,
    "„Å£": 0x4D,
    "„ÇÉ": 0x4E,
    "„ÇÖ": 0x4F,
    "„Çá": 0x50,
    "„Ç¢": 0x51,
    "„Ç§": 0x52,
    "„Ç¶": 0x53,
    "„Ç®": 0x54,
    "„Ç™": 0x55,
    "„Ç´": 0x56,
    "„Ç≠": 0x57,
    "„ÇØ": 0x58,
    "„Ç±": 0x59,
    "„Ç≥": 0x5A,
    "„Çµ": 0x5B,
    "„Ç∑": 0x5C,
    "„Çπ": 0x5D,
    "„Çª": 0x5E,
    "„ÇΩ": 0x5F,
    "„Çø": 0x60,
    "„ÉÅ": 0x61,
    "„ÉÑ": 0x62,
    "„ÉÜ": 0x63,
    "„Éà": 0x64,
    "„Éä": 0x65,
    "„Éã": 0x66,
    "„Éå": 0x67,
    "„Éç": 0x68,
    "„Éé": 0x69,
    "„Éè": 0x6A,
    "„Éí": 0x6B,
    "„Éï": 0x6C,
    "„Éò": 0x6D,
    "„Éõ": 0x6E,
    "„Éû": 0x6F,
    "„Éü": 0x70,
    "„É†": 0x71,
    "„É°": 0x72,
    "„É¢": 0x73,
    "„É§": 0x74,
    "„É¶": 0x75,
    "„É®": 0x76,
    "„É©": 0x77,
    "„É™": 0x78,
    "„É´": 0x79,
    "„É¨": 0x7A,
    "„É≠": 0x7B,
    "„ÉØ": 0x7C,
    "„É≤": 0x7D,
    "„É≥": 0x7E,
    "„É¥": 0x7F,
    "„Ç¨": 0x80,
    "„ÇÆ": 0x81,
    "„Ç∞": 0x82,
    "„Ç≤": 0x83,
    "„Ç¥": 0x84,
    "„Ç∂": 0x85,
    "„Ç∏": 0x86,
    "„Ç∫": 0x87,
    "„Çº": 0x88,
    "„Çæ": 0x89,
    "„ÉÄ": 0x8A,
    "„ÉÇ": 0x8B,
    "„ÉÖ": 0x8C,
    "„Éá": 0x8D,
    "„Éâ": 0x8E,
    "„Éê": 0x8F,
    "„Éì": 0x90,
    "„Éñ": 0x91,
    "„Éô": 0x92,
    "„Éú": 0x93,
    "„Éë": 0x94,
    "„Éî": 0x95,
    "„Éó": 0x96,
    "„Éö": 0x97,
    "„Éù": 0x98,
    "„Ç°": 0x99,
    "„Ç£": 0x9A,
    "„Ç•": 0x9B,
    "„Çß": 0x9C,
    "„Ç©": 0x9D,
    "„ÉÉ": 0x9E,
    "„É£": 0x9F,
    "„É•": 0xA0,
    "„Éß": 0xA1,
    "„Éº": 0xA2,
    "ÔΩû": 0xA3,
    "~": 0xA3,
    # "‚Äï": 0xA4,
    # "‚Äï": 0xA5,
    # "‚Äï": 0xA6,
    "Ôºê": 0xA7,
    "0": 0xA7,
    "Ôºë": 0xA8,
    "1": 0xA8,
    "Ôºí": 0xA9,
    "2": 0xA9,
    "Ôºì": 0xAA,
    "3": 0xAA,
    "Ôºî": 0xAB,
    "4": 0xAB,
    "Ôºï": 0xAC,
    "5": 0xAC,
    "Ôºñ": 0xAD,
    "6": 0xAD,
    "Ôºó": 0xAE,
    "7": 0xAE,
    "Ôºò": 0xAF,
    "8": 0xAF,
    "Ôºô": 0xB0,
    "9": 0xB0,
    "[up]": 0xB1,
    "[down]": 0xB2,
    "[left]": 0xB3,
    "[right]": 0xB4,
    "ÔºÅ": 0xB5,
    "!": 0xB5,
    "Ôºü": 0xB6,
    "?": 0xB6,
    "Ôºã": 0xB7,
    "+": 0xB7,
    "Ôºç": 0xB8,
    "Ôºè": 0xB9,
    "/": 0xB9,
    "Ôºé": 0xBA,
    ".": 0xBA,
    "ÔºÜ": 0xBB,
    "&": 0xBB,
    "ÔºÉ": 0xBC,
    "#": 0xBC,
    "[heart]": 0xBD,
    "[star]": 0xBE,
    "Ôºà": 0xBF,
    "(": 0xBF,
    "Ôºâ": 0xC0,
    ")": 0xC0,
    "„Äé": 0xC1,
    "„Äè": 0xC2,
    "„Éª": 0xC3,
    "[hiragana smalln]": 0xC4,
    "[katakana smalln]": 0xC5,
    "Êòü": 0xC6,
    # 0xC7 is unused
    " ": 0xF7,
    "„ÄÄ": 0xF8,
}

CHARSET_LATIN = {
    "A": 0x00,
    "Ôº°": 0x00,
    "B": 0x01,
    "Ôº¢": 0x01,
    "C": 0x02,
    "Ôº£": 0x02,
    "D": 0x03,
    "Ôº§": 0x03,
    "E": 0x04,
    "Ôº•": 0x04,
    "F": 0x05,
    "Ôº¶": 0x05,
    "G": 0x06,
    "Ôºß": 0x06,
    "H": 0x07,
    "Ôº®": 0x07,
    "I": 0x08,
    "Ôº©": 0x08,
    "J": 0x09,
    "Ôº™": 0x09,
    "K": 0x0A,
    "Ôº´": 0x0A,
    "L": 0x0B,
    "Ôº¨": 0x0B,
    "M": 0x0C,
    "Ôº≠": 0x0C,
    "N": 0x0D,
    "ÔºÆ": 0x0D,
    "O": 0x0E,
    "ÔºØ": 0x0E,
    "P": 0x0F,
    "Ôº∞": 0x0F,
    "Q": 0x10,
    "Ôº±": 0x10,
    "R": 0x11,
    "Ôº≤": 0x11,
    "S": 0x12,
    "Ôº≥": 0x12,
    "T": 0x13,
    "Ôº¥": 0x13,
    "U": 0x14,
    "Ôºµ": 0x14,
    "V": 0x15,
    "Ôº∂": 0x15,
    "W": 0x16,
    "Ôº∑": 0x16,
    "X": 0x17,
    "Ôº∏": 0x17,
    "Y": 0x18,
    "Ôºπ": 0x18,
    "Z": 0x19,
    "Ôº∫": 0x19,
    "z": 0x1A,
    "ÔΩö": 0x1A,
    " ": 0xF7,
    "„ÄÄ": 0xF8,
}

CHARSET_KANJI = {
    "‰∏ä": 0x00,
    "‰∏ã": 0x01,
    "Â∑¶": 0x02,
    "Âè≥": 0x03,
    "‰∏≠": 0x04,
    "Êù±": 0x05,
    "Ë•ø": 0x06,
    "Âçó": 0x07,
    "Âåó": 0x08,
    "‰∏Ä": 0x09,
    "‰∫å": 0x0A,
    "‰∏â": 0x0B,
    "Âêç": 0x0C,
    "ÂõΩ": 0x0D,
    "Âüé": 0x0E,
    "Âß´": 0x0F,
    "Â§ß": 0x10,
    "Áéã": 0x11,
    "Ëä±": 0x12,
    "‰∏ñ": 0x13,
    "Áïå": 0x14,
    "Ëçâ": 0x15,
    "Ê∞ó": 0x16,
    "Èñì": 0x17,
    "ÈñÄ": 0x18,
    "ÂÆ∂": 0x19,
    "Âú∞": 0x1A,
    "Â≤©": 0x1B,
    "ÈßÖ": 0x1C,
    "Â±±": 0x1D,
    "Êµ∑": 0x1E,
    "ÁÅ´": 0x1F,
    "Ê∞¥": 0x20,
    "Ê∞∑": 0x21,
    "Êó•": 0x22,
    "Ê†π": 0x23,
    "Èõ≤": 0x24,
    "Âè£": 0x25,
    "Âéü": 0x26,
    "Ââç": 0x27,
    "Â∫ó": 0x28,
    "Â§©": 0x29,
    "Ê£Æ": 0x2A,
    "Êú®": 0x2B,
    "Âäõ": 0x2C,
    "Á©∫": 0x2D,
    "‰∫∫": 0x2E,
    "Â≥∂": 0x2F,
    "Âá∫": 0x30,
    "ÂÖ•": 0x31,
    "Êú¨": 0x32,
    "Áü≥": 0x33,
    "Êùë": 0x34,
    "‰ºë": 0x35,
    "ÂÖà": 0x36,
    "Ë¶ã": 0x37,
    "Ëøë": 0x38,
    "Êñπ": 0x39,
    "Ê≥ï": 0x3A,
    "Êâã": 0x3B,
    "Á¥ô": 0x3C,
    "Âºï": 0x3D,
    "Â†¥": 0x3E,
    "ÊâÄ": 0x3F,
    "‰Ωø": 0x40,
    "Âõû": 0x41,
    "ÈÅì": 0x42,
    "Áâ©": 0x43,
    "Âºü": 0x44,
    "Â≠ê": 0x45,
    "Ê±Ω": 0x46,
    "Ëªä": 0x47,
    "‰Ωï": 0x48,
    "Èªí": 0x49,
    "ÂàÜ": 0x4A,
    "ÊôÇ": 0x4B,
    "Â±ã": 0x4C,
    "Èü≥": 0x4D,
    "ÁõÆ": 0x4E,
    "Ë°å": 0x4F,
    "Áµµ": 0x50,
    "Êúà": 0x51,
    "Èáé": 0x52,
    "Â§ñ": 0x53,
    "Âõ≥": 0x54,
    "ÈÉ®": 0x55,
    "Â∞è": 0x56,
    "È¢®": 0x57,
    "È≠î": 0x58,
    "ÂÖÉ": 0x59,
    "Â§™": 0x5A,
    "ÈôΩ": 0x5B,
    "ÂÆü": 0x5C,
    "Ëµ§": 0x5D,
    "Èõ™": 0x5E,
    "Ë∞∑": 0x5F,
    "ÈÄö": 0x60,
    "[circle]": 0x61,
    "[cross]": 0x62,
    "Èï∑": 0x63,
    "Ë©±": 0x64,
    "Ëâ≤": 0x65,
    "ÂÖâ": 0x66,
    "Âêà": 0x67,
    "Èùí": 0x68,
    "ÈªÑ": 0x69,
    "[note]": 0x6A,
    "ÂΩì": 0x6B,
    "Êï∞": 0x6C,
    "ÂÖÑ": 0x6D,
    "Áî®": 0x6E,
    "ÂøÉ": 0x6F,
    "‰ªä": 0x70,
    "Ê≠£": 0x71,
    "Áõ¥": 0x72,
    "ÂÖ®": 0x73,
    "‰Ωì": 0x74,
    "Â§ú": 0x75,
    "Èù¢": 0x76,
    "Ëô´": 0x77,
    "ÔΩò": 0x78,
    "x": 0x78,
    " ": 0xF7,
    "„ÄÄ": 0xF8,
}

CHARSET_BUTTONS = {
    "[~a]": 0x00,
    "[~b]": 0x01,
    "[~start]": 0x02,
    "[~c-up]": 0x03,
    "[~c-down]": 0x04,
    "[~c-left]": 0x05,
    "[~c-right]": 0x06,
    "[~z]": 0x07,
    "[~l]": 0x08,
    "[~r]": 0x09,
}

CHARSET_IQUE = {
    " ": 0xF7,
    "Ê†ó": [0x5F, 0x01],
    "Ëê®": [0x5F, 0x02],
    "Â∏¶": [0x5F, 0x03],
    "Âùó": [0x5F, 0x04],
    "Áèç": [0x5F, 0x05],
    "Áæé": [0x5F, 0x06],
    "Âïß": [0x5F, 0x07],
    "Ëç£": [0x5F, 0x08],
    "Âêó": [0x5F, 0x09],
    "Ââç": [0x5F, 0x0A],
    "Á†¥": [0x5F, 0x0B],
    "Â≠ô": [0x5F, 0x0C],
    "Âõ†": [0x5F, 0x0D],
    "ÊøÄ": [0x5F, 0x0E],
    "Êõæ": [0x5F, 0x0F],
    "Èúá": [0x5F, 0x10],
    "Ëäí": [0x5F, 0x11],
    "Â≥∞": [0x5F, 0x12],
    "Áï•": [0x5F, 0x13],
    "Â±Ö": [0x5F, 0x14],
    "ËØæ": [0x5F, 0x15],
    "Áà∂": [0x5F, 0x16],
    "Êâë": [0x5F, 0x17],
    "Êï∞": [0x5F, 0x18],
    "ËÖª": [0x5F, 0x19],
    "Âê∏": [0x5F, 0x1A],
    "Âåñ": [0x5F, 0x1B],
    "Ê≠ª": [0x5F, 0x1C],
    "ÈÄ∏": [0x5F, 0x1D],
    "Â©™": [0x5F, 0x1E],
    "ÂîÆ": [0x5F, 0x1F],
    "Èáá": [0x5F, 0x20],
    "Ë¥®": [0x5F, 0x21],
    "ÁßØ": [0x5F, 0x22],
    "Á™Ñ": [0x5F, 0x23],
    "Âæò": [0x5F, 0x24],
    "Áù¶": [0x5F, 0x25],
    "ÊÇâ": [0x5F, 0x26],
    "È™Ç": [0x5F, 0x27],
    "Ë∑µ": [0x5F, 0x28],
    "Áõä": [0x5F, 0x29],
    "È≠Ñ": [0x5F, 0x2A],
    "‰æß": [0x5F, 0x2B],
    "Ëæñ": [0x5F, 0x2C],
    "ÈÖ±": [0x5F, 0x2D],
    "Âíê": [0x5F, 0x2E],
    "Ââî": [0x5F, 0x2F],
    "Â¶á": [0x5F, 0x30],
    "ÊéÄ": [0x5F, 0x31],
    "Â≠ê": [0x60, 0x01],
    "ÁßÉ": [0x60, 0x02],
    "Èïø": [0x60, 0x03],
    "ÂüÉ": [0x60, 0x04],
    "Ë¥µ": [0x60, 0x05],
    "ÂÖâ": [0x60, 0x06],
    "ÂóØ": [0x60, 0x07],
    "Âπ∏": [0x60, 0x08],
    "ÂÄí": [0x60, 0x09],
    "Êé¢": [0x60, 0x0A],
    "Âùè": [0x60, 0x0B],
    "Ëøõ": [0x60, 0x0C],
    "Ê≠§": [0x60, 0x0D],
    "Âä®": [0x60, 0x0E],
    "ÂÆ≥": [0x60, 0x0F],
    "Âç±": [0x60, 0x10],
    "Âº∫": [0x60, 0x11],
    "Èõ∑": [0x60, 0x12],
    "Áéª": [0x60, 0x13],
    "‰ºÅ": [0x60, 0x14],
    "Á®ã": [0x60, 0x15],
    "Ë¥ù": [0x60, 0x16],
    "Èºª": [0x60, 0x17],
    "Â£∞": [0x60, 0x18],
    "Ëéì": [0x60, 0x19],
    "Áõæ": [0x60, 0x1A],
    "Ê±Ω": [0x60, 0x1B],
    "Ë°∞": [0x60, 0x1C],
    "È≠Å": [0x60, 0x1D],
    "Áéá": [0x60, 0x1E],
    "Âπø": [0x60, 0x1F],
    "Êçâ": [0x60, 0x20],
    "Âüã": [0x60, 0x21],
    "È∏¶": [0x60, 0x22],
    "‰ªÜ": [0x60, 0x23],
    "Âæä": [0x60, 0x24],
    "ËÑæ": [0x60, 0x25],
    "Âê´": [0x60, 0x26],
    "Ëîº": [0x60, 0x27],
    "Ëâ≥": [0x60, 0x28],
    "Èòµ": [0x60, 0x29],
    "ÂÆú": [0x60, 0x2A],
    "ÁΩï": [0x60, 0x2B],
    "ËÇö": [0x60, 0x2C],
    "Â®±": [0x60, 0x2D],
    "Â¶Ñ": [0x60, 0x2E],
    "Ê†Ö": [0x60, 0x2F],
    "ÈÉë": [0x60, 0x30],
    "ÂÖº": [0x60, 0x31],
    "Â∞è": [0x61, 0x01],
    "Èπ´": [0x61, 0x02],
    "Áüõ": [0x61, 0x03],
    "Ëé´": [0x61, 0x04],
    "ÁöÑ": [0x61, 0x05],
    "Â∞±": [0x61, 0x06],
    "Â•Ω": [0x61, 0x07],
    "Êüê": [0x61, 0x08],
    "Êèê": [0x61, 0x09],
    "ÂçÅ": [0x61, 0x0A],
    "Êûú": [0x61, 0x0B],
    "Áñë": [0x61, 0x0C],
    "Âøô": [0x61, 0x0D],
    "Âèä": [0x61, 0x0E],
    "ÊÄï": [0x61, 0x0F],
    "‰Ωø": [0x61, 0x10],
    "ÁÉà": [0x61, 0x11],
    "Ê≤ô": [0x61, 0x12],
    "Â∞º": [0x61, 0x13],
    "ÈπÖ": [0x61, 0x14],
    "Êôö": [0x61, 0x15],
    "ËÉÜ": [0x61, 0x16],
    "Âùö": [0x61, 0x17],
    "Ë≠¶": [0x61, 0x18],
    "ÊêÖ": [0x61, 0x19],
    "ÈÅø": [0x61, 0x1A],
    "ËÑ∏": [0x61, 0x1B],
    "Ê∑ò": [0x61, 0x1C],
    "Ê¢ß": [0x61, 0x1D],
    "ÂπÖ": [0x61, 0x1E],
    "Ê∏©": [0x61, 0x1F],
    "Âç†": [0x61, 0x20],
    "Âñù": [0x61, 0x21],
    "Âèâ": [0x61, 0x22],
    "Êêû": [0x61, 0x23],
    "Âä°": [0x61, 0x24],
    "Êå§": [0x61, 0x25],
    "Ê¨≤": [0x61, 0x26],
    "È™ö": [0x61, 0x27],
    "È©¥": [0x61, 0x28],
    "Âà∑": [0x61, 0x29],
    "Ëµ´": [0x61, 0x2A],
    "ÂàÆ": [0x61, 0x2B],
    "ÂãÉ": [0x61, 0x2C],
    "Âçß": [0x61, 0x2D],
    "Â†ï": [0x61, 0x2E],
    "Áùπ": [0x61, 0x2F],
    "Áªº": [0x61, 0x30],
    "Áûß": [0x61, 0x31],
    "Âà∫": [0x62, 0x01],
    "Âì•": [0x62, 0x02],
    "ÊØí": [0x62, 0x03],
    "ÊñØ": [0x62, 0x04],
    "Êòü": [0x62, 0x05],
    "ÊòØ": [0x62, 0x06],
    "‰ªª": [0x62, 0x07],
    "Âèó": [0x62, 0x08],
    "ÈÜí": [0x62, 0x09],
    "ÂàÜ": [0x62, 0x0A],
    "Êùë": [0x62, 0x0B],
    "ÈóÆ": [0x62, 0x0C],
    "Èóª": [0x62, 0x0D],
    "Ëøé": [0x62, 0x0E],
    "ËÇØ": [0x62, 0x0F],
    "‰º¶": [0x62, 0x10],
    "Êã•": [0x62, 0x11],
    "Êº†": [0x62, 0x12],
    "Êãì": [0x62, 0x13],
    "Ê†º": [0x62, 0x14],
    "ÊÑö": [0x62, 0x15],
    "Êé•": [0x62, 0x16],
    "Âè∂": [0x62, 0x17],
    "Âûã": [0x62, 0x18],
    "Êãå": [0x62, 0x19],
    "Èíß": [0x62, 0x1A],
    "Á±ª": [0x62, 0x1B],
    "Êç£": [0x62, 0x1C],
    "Êç°": [0x62, 0x1D],
    "‰ºè": [0x62, 0x1E],
    "Êöñ": [0x62, 0x1F],
    "Â∫ß": [0x62, 0x20],
    "ËÇ§": [0x62, 0x21],
    "ËΩ®": [0x62, 0x22],
    "Âè≥": [0x62, 0x23],
    "ÊÇ†": [0x62, 0x24],
    "Á§æ": [0x62, 0x25],
    "Âú£": [0x62, 0x26],
    "Êãî": [0x62, 0x27],
    "Áäü": [0x62, 0x28],
    "Ê¢≥": [0x62, 0x29],
    "ËØ±": [0x62, 0x2A],
    "Ê±†": [0x62, 0x2B],
    "Âçì": [0x62, 0x2C],
    "Ê°Ü": [0x62, 0x2D],
    "Âêõ": [0x62, 0x2E],
    "Êïõ": [0x62, 0x2F],
    "Â´å": [0x62, 0x30],
    "Êñ§": [0x62, 0x31],
    "Â§¥": [0x63, 0x01],
    "Âìà": [0x63, 0x02],
    "Â£≥": [0x63, 0x03],
    "ÊûØ": [0x63, 0x04],
    "Êùñ": [0x63, 0x05],
    "ÂØπ": [0x63, 0x06],
    "‰Ωï": [0x63, 0x07],
    "Â∞ä": [0x63, 0x08],
    "Ë∑ü": [0x63, 0x09],
    "ËÄ∂": [0x63, 0x0A],
    "Ëã±": [0x63, 0x0B],
    "Ëµõ": [0x63, 0x0C],
    "ÂêÑ": [0x63, 0x0D],
    "Ê∏¥": [0x63, 0x0E],
    "Ëéâ": [0x63, 0x0F],
    "Áªë": [0x63, 0x10],
    "ÁπÅ": [0x63, 0x11],
    "ÁΩÆ": [0x63, 0x12],
    "Ëé±": [0x63, 0x13],
    "ÁªÜ": [0x63, 0x14],
    "Ë†¢": [0x63, 0x15],
    "Ââ©": [0x63, 0x16],
    "Ê∑±": [0x63, 0x17],
    "È•∞": [0x63, 0x18],
    "Êãø": [0x63, 0x19],
    "ËâØ": [0x63, 0x1A],
    "Êâî": [0x63, 0x1B],
    "Ë∑∫": [0x63, 0x1C],
    "Âò¥": [0x63, 0x1D],
    "Âùë": [0x63, 0x1E],
    "ÈÅ≠": [0x63, 0x1F],
    "Ê°•": [0x63, 0x20],
    "Á•ñ": [0x63, 0x21],
    "Êâø": [0x63, 0x22],
    "ËÜù": [0x63, 0x23],
    "Ëµã": [0x63, 0x24],
    "ÊÄÇ": [0x63, 0x25],
    "Âáã": [0x63, 0x26],
    "ËØ¶": [0x63, 0x27],
    "Ê≤ü": [0x63, 0x28],
    "Êí§": [0x63, 0x29],
    "Êî•": [0x63, 0x2A],
    "Áª≥": [0x63, 0x2B],
    "Êûï": [0x63, 0x2C],
    "Êèí": [0x63, 0x2D],
    "Áµû": [0x63, 0x2E],
    "Ëêå": [0x63, 0x2F],
    "‰∫°": [0x63, 0x30],
    "Êíë": [0x63, 0x31],
    "È£û": [0x64, 0x01],
    "Èáë": [0x64, 0x02],
    "ÁÇé": [0x64, 0x03],
    "È™®": [0x64, 0x04],
    "‰ªé": [0x64, 0x05],
    "Áúü": [0x64, 0x06],
    "Ë®Ä": [0x64, 0x07],
    "Êï¨": [0x64, 0x08],
    "Ëµ∑": [0x64, 0x09],
    "‰∫§": [0x64, 0x0A],
    "ÈõÑ": [0x64, 0x0B],
    "Âè™": [0x64, 0x0C],
    "ÈÇ™": [0x64, 0x0D],
    "Áßò": [0x64, 0x0E],
    "Ê≥¢": [0x64, 0x0F],
    "Êû∂": [0x64, 0x10],
    "Ë°∑": [0x64, 0x11],
    "ÁÉπ": [0x64, 0x12],
    "Âíí": [0x64, 0x13],
    "‰æµ": [0x64, 0x14],
    "Áß∞": [0x64, 0x15],
    "‰Ωô": [0x64, 0x16],
    "Á®Ä": [0x64, 0x17],
    "Âè§": [0x64, 0x18],
    "Ê¥ó": [0x64, 0x19],
    "Ôº°": [0x64, 0x1A],
    "Âºè": [0x64, 0x1B],
    "ËÑö": [0x64, 0x1C],
    "Âêê": [0x64, 0x1D],
    "Âª∫": [0x64, 0x1E],
    "Ë¢≠": [0x64, 0x1F],
    "‰øÆ": [0x64, 0x20],
    "ËÉÉ": [0x64, 0x21],
    "ÈíÆ": [0x64, 0x22],
    "ÂØå": [0x64, 0x23],
    "ÂÄî": [0x64, 0x24],
    "ÊÅø": [0x64, 0x25],
    "Èõ∂": [0x64, 0x26],
    "ÊîØ": [0x64, 0x27],
    "Â≤î": [0x64, 0x28],
    "ÊÇö": [0x64, 0x29],
    "Ëµä": [0x64, 0x2A],
    "Êûù": [0x64, 0x2B],
    "ÁªÖ": [0x64, 0x2C],
    "ËÆ∂": [0x64, 0x2D],
    "Êô¨": [0x64, 0x2E],
    "Áªç": [0x64, 0x2F],
    "ËÆØ": [0x64, 0x30],
    "ËÆ¢": [0x64, 0x31],
    "Ë°å": [0x65, 0x01],
    "Èù¢": [0x65, 0x02],
    "ËäΩ": [0x65, 0x03],
    "È≠î": [0x65, 0x04],
    "Â∫ï": [0x65, 0x05],
    "Êâì": [0x65, 0x06],
    "ËØ≠": [0x65, 0x07],
    "ÂÆ∂": [0x65, 0x08],
    "‰∫õ": [0x65, 0x09],
    "ÂÆå": [0x65, 0x0A],
    "È°∫": [0x65, 0x0B],
    "Áé©": [0x65, 0x0C],
    "ÊÅ∂": [0x65, 0x0D],
    "Âá°": [0x65, 0x0E],
    "Âõ≠": [0x65, 0x0F],
    "Ëøπ": [0x65, 0x10],
    "È¢ò": [0x65, 0x11],
    "È•™": [0x65, 0x12],
    "Á≥ï": [0x65, 0x13],
    "ÂÆà": [0x65, 0x14],
    "Â•ñ": [0x65, 0x15],
    "Êäó": [0x65, 0x16],
    "ÁÉ§": [0x65, 0x17],
    "Â®É": [0x65, 0x18],
    "È§ê": [0x65, 0x19],
    "Ôº§": [0x65, 0x1A],
    "Â∞Ñ": [0x65, 0x1B],
    "Á¢ç": [0x65, 0x1C],
    "Ê£ç": [0x65, 0x1D],
    "ËÆÆ": [0x65, 0x1E],
    "Èóπ": [0x65, 0x1F],
    "Êô¥": [0x65, 0x20],
    "Áãó": [0x65, 0x21],
    "‰º∏": [0x65, 0x22],
    "Â†Ç": [0x65, 0x23],
    "Êâß": [0x65, 0x24],
    "ÈÄî": [0x65, 0x25],
    "‰∫â": [0x65, 0x26],
    "‰º´": [0x65, 0x27],
    "ËÑâ": [0x65, 0x28],
    "ËΩ∞": [0x65, 0x29],
    "ÊÜæ": [0x65, 0x2A],
    "ËåÇ": [0x65, 0x2B],
    "ÂíÜ": [0x65, 0x2C],
    "Èíâ": [0x65, 0x2D],
    "Áóï": [0x65, 0x2E],
    "Â±ë": [0x65, 0x2F],
    "ÂíΩ": [0x65, 0x30],
    "È©Ø": [0x65, 0x31],
    "Á∫¢": [0x66, 0x01],
    "Èæü": [0x66, 0x02],
    "Èí≥": [0x66, 0x03],
    "Ê≥ï": [0x66, 0x04],
    "Èáå": [0x66, 0x05],
    "Ë¥•": [0x66, 0x06],
    "Êó†": [0x66, 0x07],
    "Ê¢¶": [0x66, 0x08],
    "‰ºô": [0x66, 0x09],
    "ÂÖ®": [0x66, 0x0A],
    "Ê∂à": [0x66, 0x0B],
    "Á¨ë": [0x66, 0x0C],
    "Âøß": [0x66, 0x0D],
    "Êô∫": [0x66, 0x0E],
    "Ë∂ä": [0x66, 0x0F],
    "ÊÅ©": [0x66, 0x10],
    "ÂÆá": [0x66, 0x11],
    "ÂáØ": [0x66, 0x12],
    "ÂπΩ": [0x66, 0x13],
    "ÊçÆ": [0x66, 0x14],
    "Âä±": [0x66, 0x15],
    "ÊåÅ": [0x66, 0x16],
    "Ê∫ê": [0x66, 0x17],
    "ÁΩê": [0x66, 0x18],
    "Ê∏Ö": [0x66, 0x19],
    "Ôº¢": [0x66, 0x1A],
    "Êñ≠": [0x66, 0x1B],
    "Â§á": [0x66, 0x1C],
    "‰ªø": [0x66, 0x1D],
    "Ëµ¥": [0x66, 0x1E],
    "‰æõ": [0x66, 0x1F],
    "Êúó": [0x66, 0x20],
    "Ëà¨": [0x66, 0x21],
    "‰∫î": [0x66, 0x22],
    "ÁíÉ": [0x66, 0x23],
    "È´¶": [0x66, 0x24],
    "Áñè": [0x66, 0x25],
    "ÈÄó": [0x66, 0x26],
    "Áåñ": [0x66, 0x27],
    "Êéò": [0x66, 0x28],
    "Èáä": [0x66, 0x29],
    "Â∑Ö": [0x66, 0x2A],
    "Âù™": [0x66, 0x2B],
    "ÂìÆ": [0x66, 0x2C],
    "Ë¥∫": [0x66, 0x2D],
    "Èî¢": [0x66, 0x2E],
    "ÂíÇ": [0x66, 0x2F],
    "Âîê": [0x66, 0x30],
    "Â†™": [0x66, 0x31],
    "Ëâ≤": [0x67, 0x01],
    "Ê±™": [0x67, 0x02],
    "Êú±": [0x67, 0x03],
    "Âç´": [0x67, 0x04],
    "ÊÑü": [0x67, 0x05],
    "Áã†": [0x67, 0x06],
    "Ë°®": [0x67, 0x07],
    "Êúã": [0x67, 0x08],
    "‰º¥": [0x67, 0x09],
    "Ëß£": [0x67, 0x0A],
    "ÊÅØ": [0x67, 0x0B],
    "Â∞Ω": [0x67, 0x0C],
    "Ëôë": [0x67, 0x0D],
    "ÊÖß": [0x67, 0x0E],
    "ÊÑâ": [0x67, 0x0F],
    "ÂÆ¢": [0x67, 0x10],
    "Á¢é": [0x67, 0x11],
    "Ëåú": [0x67, 0x12],
    "Â∫ä": [0x67, 0x13],
    "Êàñ": [0x67, 0x14],
    "Âéâ": [0x67, 0x15],
    "ÁÑ¶": [0x67, 0x16],
    "Ê±Å": [0x67, 0x17],
    "Êúà": [0x67, 0x18],
    "Ê¥Å": [0x67, 0x19],
    "Ôº•": [0x67, 0x1A],
    "Á™Å": [0x67, 0x1B],
    "Ê≠¶": [0x67, 0x1C],
    "Êõø": [0x67, 0x1D],
    "Á£ã": [0x67, 0x1E],
    "Â¶à": [0x67, 0x1F],
    "Êìö": [0x67, 0x20],
    "Á™ù": [0x67, 0x21],
    "ÂÆΩ": [0x67, 0x22],
    "Èó≠": [0x67, 0x23],
    "Âç¶": [0x67, 0x24],
    "Âáë": [0x67, 0x25],
    "‰æ¶": [0x67, 0x26],
    "Áçó": [0x67, 0x27],
    "Êîø": [0x67, 0x28],
    "ÊÑÅ": [0x67, 0x29],
    "Êûö": [0x67, 0x2A],
    "Ë§ê": [0x67, 0x2B],
    "ÊÅ∞": [0x67, 0x2C],
    "Âªâ": [0x67, 0x2D],
    "ÊßΩ": [0x67, 0x2E],
    "Â¶í": [0x67, 0x2F],
    "ËØ°": [0x67, 0x30],
    "ÊëÑ": [0x67, 0x31],
    "Ëìù": [0x68, 0x01],
    "È£ü": [0x68, 0x02],
    "Áõñ": [0x68, 0x03],
    "Èî§": [0x68, 0x04],
    "‰ºö": [0x68, 0x05],
    "Âú∞": [0x68, 0x06],
    "Ëææ": [0x68, 0x07],
    "Âèã": [0x68, 0x08],
    "ÊÄé": [0x68, 0x09],
    "Êñπ": [0x68, 0x0A],
    "Èó≤": [0x68, 0x0B],
    "ÊÉÖ": [0x68, 0x0C],
    "ÂÖ¥": [0x68, 0x0D],
    "Áóõ": [0x68, 0x0E],
    "Êó¢": [0x68, 0x0F],
    "Á†∞": [0x68, 0x10],
    "È¢ú": [0x68, 0x11],
    "Âà∂": [0x68, 0x12],
    "Âçï": [0x68, 0x13],
    "Áù¨": [0x68, 0x14],
    "ËÆ∫": [0x68, 0x15],
    "ÊÄ•": [0x68, 0x16],
    "ÁÜü": [0x68, 0x17],
    "Ëßí": [0x68, 0x18],
    "ÂâÇ": [0x68, 0x19],
    "Ôº£": [0x68, 0x1A],
    "Â∞ö": [0x68, 0x1B],
    "Ê∂â": [0x68, 0x1C],
    "ÊâÆ": [0x68, 0x1D],
    "Áäπ": [0x68, 0x1E],
    "ÈÖç": [0x68, 0x1F],
    "Á†î": [0x68, 0x20],
    "Á™ú": [0x68, 0x21],
    "Èòî": [0x68, 0x22],
    "Êó∫": [0x68, 0x23],
    "Ë∞£": [0x68, 0x24],
    "Èôå": [0x68, 0x25],
    "ÁÑâ": [0x68, 0x26],
    "Â•¥": [0x68, 0x27],
    "ÊÖå": [0x68, 0x28],
    "ÁÑö": [0x68, 0x29],
    "Áßí": [0x68, 0x2A],
    "ÊØØ": [0x68, 0x2B],
    "Ê∫É": [0x68, 0x2C],
    "Â¶•": [0x68, 0x2D],
    "‰ªá": [0x68, 0x2E],
    "Âøå": [0x68, 0x2F],
    "Êàí": [0x68, 0x30],
    "Êãæ": [0x68, 0x31],
    "Áéã": [0x69, 0x01],
    "‰∫∫": [0x69, 0x02],
    "Ëúú": [0x69, 0x03],
    "Â∑´": [0x69, 0x04],
    "Áî®": [0x69, 0x05],
    "Êïô": [0x69, 0x06],
    "ÊâÄ": [0x69, 0x07],
    "Ê≤°": [0x69, 0x08],
    "Âó®": [0x69, 0x09],
    "È£é": [0x69, 0x0A],
    "Ëç°": [0x69, 0x0B],
    "‰∫´": [0x69, 0x0C],
    "Áîú": [0x69, 0x0D],
    "Ëã¶": [0x69, 0x0E],
    "ÁÆÄ": [0x69, 0x0F],
    "Âßê": [0x69, 0x10],
    "Á†ñ": [0x69, 0x11],
    "Êü†": [0x69, 0x12],
    "Êíû": [0x69, 0x13],
    "ÁßÅ": [0x69, 0x14],
    "‰∏§": [0x69, 0x15],
    "‰øò": [0x69, 0x16],
    "Áìú": [0x69, 0x17],
    "Áî∑": [0x69, 0x18],
    "ÁÉò": [0x69, 0x19],
    "Ôº¶": [0x69, 0x1A],
    "Âíñ": [0x69, 0x1B],
    "È©æ": [0x69, 0x1C],
    "‰ºó": [0x69, 0x1D],
    "Ë±´": [0x69, 0x1E],
    "È•≤": [0x69, 0x1F],
    "Ê≤ø": [0x69, 0x20],
    "‰∏î": [0x69, 0x21],
    "Ëàå": [0x69, 0x22],
    "Êëî": [0x69, 0x23],
    "ËÆ≤": [0x69, 0x24],
    "Áªá": [0x69, 0x25],
    "Âç§": [0x69, 0x26],
    "ÂΩπ": [0x69, 0x27],
    "ÊÇ≤": [0x69, 0x28],
    "Á®Ω": [0x69, 0x29],
    "Ëæ±": [0x69, 0x2A],
    "Ê∑°": [0x69, 0x2B],
    "Âíï": [0x69, 0x2C],
    "Ë°¨": [0x69, 0x2D],
    "Âº¶": [0x69, 0x2E],
    "Ëæë": [0x69, 0x2F],
    "Âã∫": [0x69, 0x30],
    "Ê†ë": [0x6A, 0x01],
    "Ëä±": [0x6A, 0x02],
    "ËúÇ": [0x6A, 0x03],
    "Â©Ü": [0x6A, 0x04],
    "ÂÆÉ": [0x6A, 0x05],
    "ËÆ≠": [0x6A, 0x06],
    "Âàá": [0x6A, 0x07],
    "‰ªÄ": [0x6A, 0x08],
    "ÈÇÆ": [0x6A, 0x09],
    "Êää": [0x6A, 0x0A],
    "Â∑Æ": [0x6A, 0x0B],
    "Âí≥": [0x6A, 0x0C],
    "‰º§": [0x6A, 0x0D],
    "Ë™ì": [0x6A, 0x0E],
    "Âæí": [0x6A, 0x0F],
    "Á©ø": [0x6A, 0x10],
    "ÊäÄ": [0x6A, 0x11],
    "Ê™¨": [0x6A, 0x12],
    "Ê§∞": [0x6A, 0x13],
    "Ëá¥": [0x6A, 0x14],
    "‰ºò": [0x6A, 0x15],
    "Ëôè": [0x6A, 0x16],
    "ËçØ": [0x6A, 0x17],
    "ËÇñ": [0x6A, 0x18],
    "Áâõ": [0x6A, 0x19],
    "Ê≥®": [0x6A, 0x1A],
    "Âñ±": [0x6A, 0x1B],
    "È©∂": [0x6A, 0x1C],
    "ÂñÇ": [0x6A, 0x1D],
    "ÊúØ": [0x6A, 0x1E],
    "ÂÜú": [0x6A, 0x1F],
    "Ë∏è": [0x6A, 0x20],
    "Ê°©": [0x6A, 0x21],
    "Áªµ": [0x6A, 0x22],
    "Ê∞õ": [0x6A, 0x23],
    "Áñ≤": [0x6A, 0x24],
    "Áªü": [0x6A, 0x25],
    "ËéΩ": [0x6A, 0x26],
    "Ëæú": [0x6A, 0x27],
    "Ë∫Å": [0x6A, 0x28],
    "ÂÖî": [0x6A, 0x29],
    "ÁÆ≠": [0x6A, 0x2A],
    "Â§Æ": [0x6A, 0x2B],
    "Âìù": [0x6A, 0x2C],
    "Ë°´": [0x6A, 0x2D],
    "Áºâ": [0x6A, 0x2E],
    "ÁÆ©": [0x6A, 0x2F],
    "È£ï": [0x6A, 0x30],
    "Âñè": [0x6B, 0x01],
    "Ë∂Ö": [0x6B, 0x02],
    "ÂÇ¨": [0x6B, 0x03],
    "Èí±": [0x6B, 0x04],
    "Áªô": [0x6B, 0x05],
    "‰ªñ": [0x6B, 0x06],
    "ÂõΩ": [0x6B, 0x07],
    "‰ªã": [0x6B, 0x08],
    "ÈÄí": [0x6B, 0x09],
    "Âêπ": [0x6B, 0x0A],
    "Âä≤": [0x6B, 0x0B],
    "Âπ≤": [0x6B, 0x0C],
    "Êîæ": [0x6B, 0x0D],
    "Êú´": [0x6B, 0x0E],
    "Âä≥": [0x6B, 0x0F],
    "Ë°£": [0x6B, 0x10],
    "Ë£§": [0x6B, 0x11],
    "Á≥ñ": [0x6B, 0x12],
    "Ëãπ": [0x6B, 0x13],
    "ÈÄÇ": [0x6B, 0x14],
    "ÁßÄ": [0x6B, 0x15],
    "ÊÉä": [0x6B, 0x16],
    "Âå∫": [0x6B, 0x17],
    "Èí•": [0x6B, 0x18],
    "Â•∂": [0x6B, 0x19],
    "Ë∏±": [0x6B, 0x1A],
    "ÁÉ¶": [0x6B, 0x1B],
    "ÊºÇ": [0x6B, 0x1C],
    "Èîª": [0x6B, 0x1D],
    "ÊÉï": [0x6B, 0x1E],
    "Â∏Ç": [0x6B, 0x1F],
    "Êã±": [0x6B, 0x20],
    "ÂºØ": [0x6B, 0x21],
    "Êª©": [0x6B, 0x22],
    "Á∫Ø": [0x6B, 0x23],
    "ÊÉ´": [0x6B, 0x24],
    "Ëæ®": [0x6B, 0x25],
    "Êí≠": [0x6B, 0x26],
    "ËÇÜ": [0x6B, 0x27],
    "Êçü": [0x6B, 0x28],
    "ËáÇ": [0x6B, 0x29],
    "Âì≠": [0x6B, 0x2A],
    "ÂÖ≠": [0x6B, 0x2B],
    "ËØÄ": [0x6B, 0x2C],
    "È•∂": [0x6B, 0x2D],
    "Êéà": [0x6B, 0x2E],
    "Âãâ": [0x6B, 0x2F],
    "Âäà": [0x6B, 0x30],
    "Â∫ì": [0x6C, 0x01],
    "Á∫ß": [0x6C, 0x02],
    "Áú†": [0x6C, 0x03],
    "‰πå": [0x6C, 0x04],
    "Ëøô": [0x6C, 0x05],
    "Â§ö": [0x6C, 0x06],
    "Êï¥": [0x6C, 0x07],
    "ÊÑè": [0x6C, 0x08],
    "Âëò": [0x6C, 0x09],
    "Âî∑": [0x6C, 0x0A],
    "‰∏à": [0x6C, 0x0B],
    "‰ºü": [0x6C, 0x0C],
    "ÁÑ∂": [0x6C, 0x0D],
    "Âõõ": [0x6C, 0x0E],
    "ÂÜ∑": [0x6C, 0x0F],
    "Êúç": [0x6C, 0x10],
    "Â∑¶": [0x6C, 0x11],
    "Èô§": [0x6C, 0x12],
    "ÈÖ∏": [0x6C, 0x13],
    "Ë∂≥": [0x6C, 0x14],
    "Êú™": [0x6C, 0x15],
    "ÁóÖ": [0x6C, 0x16],
    "Á°¨": [0x6C, 0x17],
    "Âåô": [0x6C, 0x18],
    "Ëµ¢": [0x6C, 0x19],
    "ÂØí": [0x6C, 0x1A],
    "ËΩØ": [0x6C, 0x1B],
    "ÊµÆ": [0x6C, 0x1C],
    "ÁÇº": [0x6C, 0x1D],
    "Ê≥º": [0x6C, 0x1E],
    "Ê∞ë": [0x6C, 0x1F],
    "Â¢ô": [0x6C, 0x20],
    "Áºò": [0x6C, 0x21],
    "ÁÇΩ": [0x6C, 0x22],
    "Á≤π": [0x6C, 0x23],
    "ËÅä": [0x6C, 0x24],
    "Ë°Ä": [0x6C, 0x25],
    "Áü≠": [0x6C, 0x26],
    "Ëôê": [0x6C, 0x27],
    "Âñä": [0x6C, 0x28],
    "Áâå": [0x6C, 0x29],
    "ÁùÅ": [0x6C, 0x2A],
    "Ëøî": [0x6C, 0x2B],
    "Á¢å": [0x6C, 0x2C],
    "Áñº": [0x6C, 0x2D],
    "ËäÆ": [0x6C, 0x2E],
    "Èªè": [0x6C, 0x2F],
    "Áå´": [0x6C, 0x30],
    "Âï™": [0x6D, 0x01],
    "Âä†": [0x6D, 0x02],
    "Á•û": [0x6D, 0x03],
    "Áîµ": [0x6D, 0x04],
    "‰∏™": [0x6D, 0x05],
    "‰πà": [0x6D, 0x06],
    "Ëòë": [0x6D, 0x07],
    "ÂøÖ": [0x6D, 0x08],
    "Â∑•": [0x6D, 0x09],
    "Áªà": [0x6D, 0x0A],
    "Â§´": [0x6D, 0x0B],
    "Êñó": [0x6D, 0x0C],
    "ÊÅô": [0x6D, 0x0D],
    "Â•î": [0x6D, 0x0E],
    "‰∏¢": [0x6D, 0x0F],
    "‰º†": [0x6D, 0x10],
    "Ëæπ": [0x6D, 0x11],
    "Ëø∑": [0x6D, 0x12],
    "Ê©ô": [0x6D, 0x13],
    "ÈõÜ": [0x6D, 0x14],
    "ËÅå": [0x6D, 0x15],
    "ÊÖ¢": [0x6D, 0x16],
    "ÈìÉ": [0x6D, 0x17],
    "ÂÇ®": [0x6D, 0x18],
    "Âé¶": [0x6D, 0x19],
    "Ëµî": [0x6D, 0x1A],
    "Êïè": [0x6D, 0x1B],
    "Êóè": [0x6D, 0x1C],
    "ËÉñ": [0x6D, 0x1D],
    "Ë¢ç": [0x6D, 0x1E],
    "ÂÆÖ": [0x6D, 0x1F],
    "Êæ°": [0x6D, 0x20],
    "‰Ωé": [0x6D, 0x21],
    "ËîΩ": [0x6D, 0x22],
    "Ê≤â": [0x6D, 0x23],
    "ËÉå": [0x6D, 0x24],
    "Ê≤∏": [0x6D, 0x25],
    "Â∞§": [0x6D, 0x26],
    "Á•∏": [0x6D, 0x27],
    "Êé©": [0x6D, 0x28],
    "È≤Å": [0x6D, 0x29],
    "ÈÖ¨": [0x6D, 0x2A],
    "Êã®": [0x6D, 0x2B],
    "ÁØù": [0x6D, 0x2C],
    "Á••": [0x6D, 0x2D],
    "Êäö": [0x6D, 0x2E],
    "Â°´": [0x6D, 0x2F],
    "‰øè": [0x6D, 0x30],
    "Âóí": [0x6E, 0x01],
    "ÈÇ¶": [0x6E, 0x02],
    "Â•á": [0x6E, 0x03],
    "ÂÆù": [0x6E, 0x04],
    "‰∏ñ": [0x6E, 0x05],
    "Âè¶": [0x6E, 0x06],
    "Ëèá": [0x6E, 0x07],
    "È°ª": [0x6E, 0x08],
    "‰Ωú": [0x6E, 0x09],
    "Áõõ": [0x6E, 0x0A],
    "Â¶ª": [0x6E, 0x0B],
    "Â∫Ü": [0x6E, 0x0C],
    "‰∏â": [0x6E, 0x0D],
    "Áõ∏": [0x6E, 0x0E],
    "Á¥Ø": [0x6E, 0x0F],
    "ÈÅç": [0x6E, 0x10],
    "Êâá": [0x6E, 0x11],
    "Ê£Æ": [0x6E, 0x12],
    "Ë∞É": [0x6E, 0x13],
    "Âîâ": [0x6E, 0x14],
    "Èöê": [0x6E, 0x15],
    "Âº±": [0x6E, 0x16],
    "ËñØ": [0x6E, 0x17],
    "ËÆæ": [0x6E, 0x18],
    "Ê∏Ø": [0x6E, 0x19],
    "ÂÅø": [0x6E, 0x1A],
    "Áùõ": [0x6E, 0x1B],
    "Âù¶": [0x6E, 0x1C],
    "Âî†": [0x6E, 0x1D],
    "Áæ°": [0x6E, 0x1E],
    "ÂîØ": [0x6E, 0x1F],
    "Âòõ": [0x6E, 0x20],
    "ÂÄº": [0x6E, 0x21],
    "Êò•": [0x6E, 0x22],
    "Áñô": [0x6E, 0x23],
    "Â§∏": [0x6E, 0x24],
    "ËÖæ": [0x6E, 0x25],
    "Ëíú": [0x6E, 0x26],
    "ÊØ´": [0x6E, 0x27],
    "Ê∫¢": [0x6E, 0x28],
    "ÂÖú": [0x6E, 0x29],
    "Ë¥´": [0x6E, 0x2A],
    "Á¨¶": [0x6E, 0x2B],
    "ÁÜô": [0x6E, 0x2C],
    "ÊØô": [0x6E, 0x2D],
    "Âò±": [0x6E, 0x2E],
    "ÂñÄ": [0x6E, 0x2F],
    "Êõô": [0x6E, 0x30],
    "Áªí": [0x6F, 0x01],
    "Âõæ": [0x6F, 0x02],
    "Âè≤": [0x6F, 0x03],
    "Â∏à": [0x6F, 0x04],
    "Áïå": [0x6F, 0x05],
    "Èöæ": [0x6F, 0x06],
    "ÂÖÖ": [0x6F, 0x07],
    "Ëµ∞": [0x6F, 0x08],
    "Âë¢": [0x6F, 0x09],
    "‰∫≤": [0x6F, 0x0A],
    "Âëä": [0x6F, 0x0B],
    "Á•ù": [0x6F, 0x0C],
    "Â∞ë": [0x6F, 0x0D],
    "ËÄê": [0x6F, 0x0E],
    "Âñî": [0x6F, 0x0F],
    "ÂΩ©": [0x6F, 0x10],
    "Á™ó": [0x6F, 0x11],
    "Êûó": [0x6F, 0x12],
    "ÈÖí": [0x6F, 0x13],
    "ËÄó": [0x6F, 0x14],
    "Êâç": [0x6F, 0x15],
    "ÂÅ•": [0x6F, 0x16],
    "Êïà": [0x6F, 0x17],
    "Â¶ô": [0x6F, 0x18],
    "Áéõ": [0x6F, 0x19],
    "È©≠": [0x6F, 0x1A],
    "ËÄç": [0x6F, 0x1B],
    "‰ªÖ": [0x6F, 0x1C],
    "Âè®": [0x6F, 0x1D],
    "ÊÖï": [0x6F, 0x1E],
    "ÂéÖ": [0x6F, 0x1F],
    "Ëçí": [0x6F, 0x20],
    "Âêä": [0x6F, 0x21],
    "Ëó§": [0x6F, 0x22],
    "Áò©": [0x6F, 0x23],
    "ÂÆ†": [0x6F, 0x24],
    "Á©Ü": [0x6F, 0x25],
    "Êíº": [0x6F, 0x26],
    "ËØö": [0x6F, 0x27],
    "È™å": [0x6F, 0x28],
    "Â•à": [0x6F, 0x29],
    "Á©∑": [0x6F, 0x2A],
    "Áå™": [0x6F, 0x2B],
    "Êîò": [0x6F, 0x2C],
    "Èì∞": [0x6F, 0x2D],
    "Ë£î": [0x6F, 0x2E],
    "Êªû": [0x6F, 0x2F],
    "Âõ±": [0x6F, 0x30],
    "ÊØõ": [0x70, 0x01],
    "Â∑¥": [0x70, 0x02],
    "Ê¥æ": [0x70, 0x03],
    "Èôà": [0x70, 0x04],
    "Èáç": [0x70, 0x05],
    "Âøò": [0x70, 0x06],
    "Êª°": [0x70, 0x07],
    "Èùû": [0x70, 0x08],
    "ÊôÆ": [0x70, 0x09],
    "Á¨î": [0x70, 0x0A],
    "ËØâ": [0x70, 0x0B],
    "Áº∫": [0x70, 0x0C],
    "ÊóÖ": [0x70, 0x0D],
    "ÊûÅ": [0x70, 0x0E],
    "Êó±": [0x70, 0x0F],
    "Âï∏": [0x70, 0x10],
    "È¶ñ": [0x70, 0x11],
    "Âáª": [0x70, 0x12],
    "È°Ω": [0x70, 0x13],
    "ËôΩ": [0x70, 0x14],
    "Êòæ": [0x70, 0x15],
    "Â∫∑": [0x70, 0x16],
    "Áú©": [0x70, 0x17],
    "ÂÖ∑": [0x70, 0x18],
    "ÂΩí": [0x70, 0x19],
    "Âèå": [0x70, 0x1A],
    "‰ªô": [0x70, 0x1B],
    "Ê®°": [0x70, 0x1C],
    "Â∞ù": [0x70, 0x1D],
    "ËÇÉ": [0x70, 0x1E],
    "Á†Å": [0x70, 0x1F],
    "Ëäú": [0x70, 0x20],
    "Ê©±": [0x70, 0x21],
    "Ê≥â": [0x70, 0x22],
    "ÁÖû": [0x70, 0x23],
    "ÊÖ∑": [0x70, 0x24],
    "Â•è": [0x70, 0x25],
    "ÊîÄ": [0x70, 0x26],
    "ÈôÜ": [0x70, 0x27],
    "ÊÉ¶": [0x70, 0x28],
    "Ëµò": [0x70, 0x29],
    "ÊÖ∞": [0x70, 0x2A],
    "Â±ø": [0x70, 0x2B],
    "Áò´": [0x70, 0x2C],
    "Èìæ": [0x70, 0x2D],
    "Ëä¨": [0x70, 0x2E],
    "ËÇ†": [0x70, 0x2F],
    "ÈÄù": [0x70, 0x30],
    "ÊÄ™": [0x71, 0x01],
    "Â∏É": [0x71, 0x02],
    "ÂÖã": [0x71, 0x03],
    "Êùé": [0x71, 0x04],
    "Êñ∞": [0x71, 0x05],
    "Èáè": [0x71, 0x06],
    "Ê¨†": [0x71, 0x07],
    "Â∏∏": [0x71, 0x08],
    "ÈÄö": [0x71, 0x09],
    "Á≠æ": [0x71, 0x0A],
    "Âá∫": [0x71, 0x0B],
    "Â∏≠": [0x71, 0x0C],
    "Êó©": [0x71, 0x0D],
    "Èôê": [0x71, 0x0E],
    "ËêΩ": [0x71, 0x0F],
    "Ë∞∑": [0x71, 0x10],
    "Êòì": [0x71, 0x11],
    "‰π±": [0x71, 0x12],
    "ÁöÆ": [0x71, 0x13],
    "ÂΩ±": [0x71, 0x14],
    "Â≠ò": [0x71, 0x15],
    "Á¶è": [0x71, 0x16],
    "Êôï": [0x71, 0x17],
    "ÁÖé": [0x71, 0x18],
    "Áúº": [0x71, 0x19],
    "Ëµè": [0x71, 0x1A],
    "ÊÉØ": [0x71, 0x1B],
    "Â®Å": [0x71, 0x1C],
    "Êãç": [0x71, 0x1D],
    "Ë¢ñ": [0x71, 0x1E],
    "Âáù": [0x71, 0x1F],
    "Èô°": [0x71, 0x20],
    "Ëë£": [0x71, 0x21],
    "Â†µ": [0x71, 0x22],
    "Á¢æ": [0x71, 0x23],
    "ÊÖ®": [0x71, 0x24],
    "‰πû": [0x71, 0x25],
    "ÂÆø": [0x71, 0x26],
    "È≠Ö": [0x71, 0x27],
    "Âäù": [0x71, 0x28],
    "ÊØç": [0x71, 0x29],
    "Áõº": [0x71, 0x2A],
    "Ê¥Ω": [0x71, 0x2B],
    "Áó™": [0x71, 0x2C],
    "Âìî": [0x71, 0x2D],
    "ÂøΩ": [0x71, 0x2E],
    "Áïú": [0x71, 0x2F],
    "ÈÄû": [0x71, 0x30],
    "ÁÇ∏": [0x72, 0x01],
    "Ë∑Ø": [0x72, 0x02],
    "‰∫ë": [0x72, 0x03],
    "Êöó": [0x72, 0x04],
    "Êù•": [0x72, 0x05],
    "Âïä": [0x72, 0x06],
    "Âæà": [0x72, 0x07],
    "Áõ¥": [0x72, 0x08],
    "Â∞Å": [0x72, 0x09],
    "Âêç": [0x72, 0x0A],
    "Êäì": [0x72, 0x0B],
    "Âüπ": [0x72, 0x0C],
    "Á∫™": [0x72, 0x0D],
    "ËÑë": [0x72, 0x0E],
    "Âêë": [0x72, 0x0F],
    "Â©ö": [0x72, 0x10],
    "Âêâ": [0x72, 0x11],
    "Ê¥≤": [0x72, 0x12],
    "Â≠¶": [0x72, 0x13],
    "ËÅî": [0x72, 0x14],
    "‰ªΩ": [0x72, 0x15],
    "È¢ó": [0x72, 0x16],
    "Ê±§": [0x72, 0x17],
    "Áõò": [0x72, 0x18],
    "Èïú": [0x72, 0x19],
    "ÈÄè": [0x72, 0x1A],
    "Âëº": [0x72, 0x1B],
    "‰Ω≥": [0x72, 0x1C],
    "Êå£": [0x72, 0x1D],
    "ÈõÖ": [0x72, 0x1E],
    "Êµ∑": [0x72, 0x1F],
    "Â≥≠": [0x72, 0x20],
    "ÊòÇ": [0x72, 0x21],
    "ËÇ•": [0x72, 0x22],
    "ÁÇ¨": [0x72, 0x23],
    "ÂÄü": [0x72, 0x24],
    "‰∏ê": [0x72, 0x25],
    "‰ª∞": [0x72, 0x26],
    "ÊãÜ": [0x72, 0x27],
    "ÊÉ≠": [0x72, 0x28],
    "ÂøÜ": [0x72, 0x29],
    "È°ø": [0x72, 0x2A],
    "Ëçê": [0x72, 0x2B],
    "‰ºç": [0x72, 0x2C],
    "Ë∞¨": [0x72, 0x2D],
    "Ë∂Å": [0x72, 0x2E],
    "ÊêÅ": [0x72, 0x2F],
    "Êé™": [0x72, 0x30],
    "Âºπ": [0x73, 0x01],
    "‰πã": [0x73, 0x02],
    "Èõæ": [0x73, 0x03],
    "ËØ∫": [0x73, 0x04],
    "Âíå": [0x73, 0x05],
    "‰∏Ä": [0x73, 0x06],
    "Ê±Ä": [0x73, 0x07],
    "Ê†∑": [0x73, 0x08],
    "‰ø°": [0x73, 0x09],
    "Â§™": [0x73, 0x0A],
    "ÂÖ≥": [0x73, 0x0B],
    "ÁêÜ": [0x73, 0x0C],
    "Âøµ": [0x73, 0x0D],
    "Á≠ã": [0x73, 0x0E],
    "ÁÇ´": [0x73, 0x0F],
    "Âòò": [0x73, 0x10],
    "ËÅ™": [0x73, 0x11],
    "Êéâ": [0x73, 0x12],
    "ËÄÖ": [0x73, 0x13],
    "Êäº": [0x73, 0x14],
    "‰πì": [0x73, 0x15],
    "‰∏É": [0x73, 0x16],
    "Ëèú": [0x73, 0x17],
    "ËØª": [0x73, 0x18],
    "ÂºÇ": [0x73, 0x19],
    "Áì∂": [0x73, 0x1A],
    "Êè¥": [0x73, 0x1B],
    "Ë°°": [0x73, 0x1C],
    "ËÑ±": [0x73, 0x1D],
    "ËæÉ": [0x73, 0x1E],
    "Ëæì": [0x73, 0x1F],
    "Âçë": [0x73, 0x20],
    "Á™•": [0x73, 0x21],
    "Â∑¢": [0x73, 0x22],
    "ÊÉë": [0x73, 0x23],
    "Ë¥¥": [0x73, 0x24],
    "Ë¥©": [0x73, 0x25],
    "‰ªó": [0x73, 0x26],
    "Âßë": [0x73, 0x27],
    "ÊÉß": [0x73, 0x28],
    "Á≠ñ": [0x73, 0x29],
    "Â¨â": [0x73, 0x2A],
    "ÂÜ†": [0x73, 0x2B],
    "Ê≥™": [0x73, 0x2C],
    "Â±à": [0x73, 0x2D],
    "Âëê": [0x73, 0x2E],
    "Âö∑": [0x73, 0x2F],
    "Êãñ": [0x73, 0x30],
    "ÂÖµ": [0x74, 0x01],
    "ÂøÉ": [0x74, 0x02],
    "ËÄÅ": [0x74, 0x03],
    "ÁÅ∞": [0x74, 0x04],
    "Âπ≥": [0x74, 0x05],
    "ÂÆö": [0x74, 0x06],
    "ËØ¥": [0x74, 0x07],
    "Ôºü": [0x74, 0x08],
    "Â•π": [0x74, 0x09],
    "Ê£í": [0x74, 0x0A],
    "ÈîÆ": [0x74, 0x0B],
    "Áî±": [0x74, 0x0C],
    "ÂìÅ": [0x74, 0x0D],
    "Ë∞Å": [0x74, 0x0E],
    "ÈÅá": [0x74, 0x0F],
    "Âêì": [0x74, 0x10],
    "Ê†ã": [0x74, 0x11],
    "Êîπ": [0x74, 0x12],
    "ÂåÖ": [0x74, 0x13],
    "Ê±Ç": [0x74, 0x14],
    "‰πí": [0x74, 0x15],
    "‰∫à": [0x74, 0x16],
    "Ëå∂": [0x74, 0x17],
    "ÊáÇ": [0x74, 0x18],
    "ËÅö": [0x74, 0x19],
    "Èíª": [0x74, 0x1A],
    "Áã°": [0x74, 0x1B],
    "ÁüÆ": [0x74, 0x1C],
    "ÊÇ¨": [0x74, 0x1D],
    "ËÉÅ": [0x74, 0x1E],
    "Ë∏™": [0x74, 0x1F],
    "ÈÑô": [0x74, 0x20],
    "Ëú°": [0x74, 0x21],
    "Á∫π": [0x74, 0x22],
    "Á¥¢": [0x74, 0x23],
    "ÂΩº": [0x74, 0x24],
    "Âìí": [0x74, 0x25],
    "ÂßÜ": [0x74, 0x26],
    "Â®ò": [0x74, 0x27],
    "ÊÄñ": [0x74, 0x28],
    "Ëâá": [0x74, 0x29],
    "ÊôÉ": [0x74, 0x2A],
    "ÊûÑ": [0x74, 0x2B],
    "‰øØ": [0x74, 0x2C],
    "Áùø": [0x74, 0x2D],
    "Á≤í": [0x74, 0x2E],
    "Ëæâ": [0x74, 0x2F],
    "ÈÄÆ": [0x74, 0x30],
    "ÊùÄ": [0x75, 0x01],
    "Âòø": [0x75, 0x02],
    "Âëú": [0x75, 0x03],
    "È©¨": [0x75, 0x04],
    "„ÄÇ": [0x75, 0x05],
    "‚Ä¶": [0x75, 0x06],
    "ÁÅµ": [0x75, 0x07],
    "Â¶Ç": [0x75, 0x08],
    "ÂÜô": [0x75, 0x09],
    "Áªù": [0x75, 0x0A],
    "ÈÄü": [0x75, 0x0B],
    "Áîö": [0x75, 0x0C],
    "ÂΩª": [0x75, 0x0D],
    "‰æø": [0x75, 0x0E],
    "Êóã": [0x75, 0x0F],
    "Âî¨": [0x75, 0x10],
    "Â∏Å": [0x75, 0x11],
    "ÊÄÅ": [0x75, 0x12],
    "Ë£π": [0x75, 0x13],
    "‰∏•": [0x75, 0x14],
    "ÂØª": [0x75, 0x15],
    "Ëàπ": [0x75, 0x16],
    "Âçá": [0x75, 0x17],
    "Âñ∑": [0x75, 0x18],
    "ËµÑ": [0x75, 0x19],
    "Áîª": [0x75, 0x1A],
    "Áåæ": [0x75, 0x1B],
    "Á≤ó": [0x75, 0x1C],
    "ÊåÇ": [0x75, 0x1D],
    "Êã≥": [0x75, 0x1E],
    "Ê•º": [0x75, 0x1F],
    "Áóá": [0x75, 0x20],
    "ÁÉõ": [0x75, 0x21],
    "‰∏ù": [0x75, 0x22],
    "‰øó": [0x75, 0x23],
    "Á¨Ü": [0x75, 0x24],
    "Âíö": [0x75, 0x25],
    "Áß©": [0x75, 0x26],
    "ÂóÖ": [0x75, 0x27],
    "Êå∫": [0x75, 0x28],
    "Âºõ": [0x75, 0x29],
    "ÁÜî": [0x75, 0x2A],
    "Êíï": [0x75, 0x2B],
    "Ê∂°": [0x75, 0x2C],
    "Á´≠": [0x75, 0x2D],
    "Ëîö": [0x75, 0x2E],
    "Â¶®": [0x75, 0x2F],
    "ÊÖà": [0x75, 0x30],
    "Êâã": [0x76, 0x01],
    "Ëôé": [0x76, 0x02],
    "Âôú": [0x76, 0x03],
    "Âäõ": [0x76, 0x04],
    "Áé∞": [0x76, 0x05],
    "‰∏ç": [0x76, 0x06],
    "ËØÅ": [0x76, 0x07],
    "Â§∫": [0x76, 0x08],
    "Áúã": [0x76, 0x09],
    "Èîô": [0x76, 0x0A],
    "Âê¨": [0x76, 0x0B],
    "Ëá≥": [0x76, 0x0C],
    "‰∏Ω": [0x76, 0x0D],
    "‰πÖ": [0x76, 0x0E],
    "ËΩ¨": [0x76, 0x0F],
    "Â≤∏": [0x76, 0x10],
    "È¢Ñ": [0x76, 0x11],
    "Á¨¨": [0x76, 0x12],
    "Ëâ∫": [0x76, 0x13],
    "Âìé": [0x76, 0x14],
    "Âõ¥": [0x76, 0x15],
    "Ëâò": [0x76, 0x16],
    "Êéß": [0x76, 0x17],
    "Ë±Ü": [0x76, 0x18],
    "Êñô": [0x76, 0x19],
    "Ê≤É": [0x76, 0x1A],
    "Êê∫": [0x76, 0x1B],
    "Áâ∫": [0x76, 0x1C],
    "Âπª": [0x76, 0x1D],
    "ÊÆã": [0x76, 0x1E],
    "Á©∂": [0x76, 0x1F],
    "Áïè": [0x76, 0x20],
    "Â£∂": [0x76, 0x21],
    "ÂØü": [0x76, 0x22],
    "Âõö": [0x76, 0x23],
    "Ââß": [0x76, 0x24],
    "Êè≠": [0x76, 0x25],
    "Êìç": [0x76, 0x26],
    "ÊÅº": [0x76, 0x27],
    "Âàó": [0x76, 0x28],
    "Áª∑": [0x76, 0x29],
    "ÊÇ®": [0x76, 0x2A],
    "È°µ": [0x76, 0x2B],
    "ËÖπ": [0x76, 0x2C],
    "‰πñ": [0x76, 0x2D],
    "ËÄ≥": [0x76, 0x2E],
    "Âóú": [0x76, 0x2F],
    "Áú®": [0x76, 0x30],
    "Â§ß": [0x77, 0x01],
    "Ëàû": [0x77, 0x02],
    "Â¶ñ": [0x77, 0x03],
    "Êú∫": [0x77, 0x04],
    "Âú®": [0x77, 0x05],
    "ÂÅö": [0x77, 0x06],
    "Êòé": [0x77, 0x07],
    "‰ºº": [0x77, 0x08],
    "ÈÄÅ": [0x77, 0x09],
    "Ëøá": [0x77, 0x0A],
    "Â§ñ": [0x77, 0x0B],
    "ÂÅá": [0x77, 0x0C],
    "Â••": [0x77, 0x0D],
    "Ëøû": [0x77, 0x0E],
    "Â±ã": [0x77, 0x0F],
    "Áâ©": [0x77, 0x10],
    "Á§∫": [0x77, 0x11],
    "ËØï": [0x77, 0x12],
    "ÂûÇ": [0x77, 0x13],
    "ÂåÜ": [0x77, 0x14],
    "ÂÜÖ": [0x77, 0x15],
    "ÁáÉ": [0x77, 0x16],
    "Êéí": [0x77, 0x17],
    "È¢§": [0x77, 0x18],
    "Â£Å": [0x77, 0x19],
    "Ë∞±": [0x77, 0x1A],
    "Ê¨æ": [0x77, 0x1B],
    "Áâ≤": [0x77, 0x1C],
    "ÁÉ´": [0x77, 0x1D],
    "Ê°à": [0x77, 0x1E],
    "Âªä": [0x77, 0x1F],
    "Áóí": [0x77, 0x20],
    "Ë§™": [0x77, 0x21],
    "Á™ü": [0x77, 0x22],
    "ÊùÇ": [0x77, 0x23],
    "Âäø": [0x77, 0x24],
    "ÂÖç": [0x77, 0x25],
    "Á´ã": [0x77, 0x26],
    "ÁΩ™": [0x77, 0x27],
    "Ëïæ": [0x77, 0x28],
    "ÈÄº": [0x77, 0x29],
    "Âπï": [0x77, 0x2A],
    "‰º∞": [0x77, 0x2B],
    "ÁΩ©": [0x77, 0x2C],
    "Èúç": [0x77, 0x2D],
    "Ê≥£": [0x77, 0x2E],
    "Ê∑å": [0x77, 0x2F],
    "Ë∞ì": [0x77, 0x30],
    "ÁÇÆ": [0x78, 0x01],
    "Ê≠•": [0x78, 0x02],
    "ÂÜ∞": [0x78, 0x03],
    "Ôºà": [0x78, 0x04],
    "Âèà": [0x78, 0x05],
    "Âä™": [0x78, 0x06],
    "Ëá™": [0x78, 0x07],
    "‰π¶": [0x78, 0x08],
    "Âêß": [0x78, 0x09],
    "Ê¨°": [0x78, 0x0A],
    "‰∏ã": [0x78, 0x0B],
    "‰ª§": [0x78, 0x0C],
    "Â§ü": [0x78, 0x0D],
    "Èó®": [0x78, 0x0E],
    "È°∂": [0x78, 0x0F],
    "Êãú": [0x78, 0x10],
    "Ëøê": [0x78, 0x11],
    "Êö¥": [0x78, 0x12],
    "Èíì": [0x78, 0x13],
    "Êçé": [0x78, 0x14],
    "ÂºÉ": [0x78, 0x15],
    "ÁÉß": [0x78, 0x16],
    "‰∏ß": [0x78, 0x17],
    "Êäñ": [0x78, 0x18],
    "Âûí": [0x78, 0x19],
    "‰ªì": [0x78, 0x1A],
    "Á¥†": [0x78, 0x1B],
    "ÈÄê": [0x78, 0x1C],
    "Êäµ": [0x78, 0x1D],
    "ËÇø": [0x78, 0x1E],
    "Âé®": [0x78, 0x1F],
    "Âàí": [0x78, 0x20],
    "Ê§Ö": [0x78, 0x21],
    "Âãò": [0x78, 0x22],
    "Ëáä": [0x78, 0x23],
    "ÂØº": [0x78, 0x24],
    "Âìç": [0x78, 0x25],
    "Ëá£": [0x78, 0x26],
    "È•±": [0x78, 0x27],
    "ÂØê": [0x78, 0x28],
    "Êù≥": [0x78, 0x29],
    "È¶®": [0x78, 0x2A],
    "Á®ø": [0x78, 0x2B],
    "È£ì": [0x78, 0x2C],
    "Ë∑®": [0x78, 0x2D],
    "Áãà": [0x78, 0x2E],
    "Ê∂å": [0x78, 0x2F],
    "Ëúó": [0x78, 0x30],
    "ÈÖ∑": [0x79, 0x01],
    "Èó¥": [0x79, 0x02],
    "ÂÜª": [0x79, 0x03],
    "ÂºÄ": [0x79, 0x04],
    "ÂèØ": [0x79, 0x05],
    "ÈÇ£": [0x79, 0x06],
    "Â∑±": [0x79, 0x07],
    "ÁñØ": [0x79, 0x08],
    "ËÆ°": [0x79, 0x09],
    "ÂÅú": [0x79, 0x0A],
    "Áåú": [0x79, 0x0B],
    "Âøç": [0x79, 0x0C],
    "Êõ¥": [0x79, 0x0D],
    "ÈöÜ": [0x79, 0x0E],
    "Êàø": [0x79, 0x0F],
    "ËÆø": [0x79, 0x10],
    "Èú≤": [0x79, 0x11],
    "Âêå": [0x79, 0x12],
    "Ë°ó": [0x79, 0x13],
    "ËåÉ": [0x79, 0x14],
    "ËßÜ": [0x79, 0x15],
    "Ôºö": [0x79, 0x16],
    "Èò≤": [0x79, 0x17],
    "Ê±°": [0x79, 0x18],
    "Êñá": [0x79, 0x19],
    "Êäí": [0x79, 0x1A],
    "Èò¥": [0x79, 0x1B],
    "Ê∏ê": [0x79, 0x1C],
    "ÈÅó": [0x79, 0x1D],
    "Â•ã": [0x79, 0x1E],
    "ËÇ¥": [0x79, 0x1F],
    "ÂÄ¶": [0x79, 0x20],
    "Áõπ": [0x79, 0x21],
    "Ê∏ä": [0x79, 0x22],
    "Âçó": [0x79, 0x23],
    "È•µ": [0x79, 0x24],
    "Ë°î": [0x79, 0x25],
    "ÊÉ©": [0x79, 0x26],
    "ÂùÄ": [0x79, 0x27],
    "Ê†Ω": [0x79, 0x28],
    "Âòü": [0x79, 0x29],
    "ÈõÄ": [0x79, 0x2A],
    "Âª∂": [0x79, 0x2B],
    "Èôõ": [0x79, 0x2C],
    "Ê¨∫": [0x79, 0x2D],
    "Âêª": [0x79, 0x2E],
    "ËØÑ": [0x79, 0x2F],
    "ÁûÑ": [0x79, 0x30],
    "Èú∏": [0x7A, 0x01],
    "Ë∞ç": [0x7A, 0x02],
    "ÁôΩ": [0x7A, 0x03],
    "Âßã": [0x7A, 0x04],
    "‰ª•": [0x7A, 0x05],
    "Âõ∞": [0x7A, 0x06],
    "‰Ωç": [0x7A, 0x07],
    "ÁãÇ": [0x7A, 0x08],
    "‰∏ä": [0x7A, 0x09],
    "Ê≠¢": [0x7A, 0x0A],
    "Âπ∂": [0x7A, 0x0B],
    "Ëãõ": [0x7A, 0x0C],
    "ËøΩ": [0x7A, 0x0D],
    "Âçñ": [0x7A, 0x0E],
    "Âï¶": [0x7A, 0x0F],
    "Â±±": [0x7A, 0x10],
    "Â°û": [0x7A, 0x11],
    "Áßç": [0x7A, 0x12],
    "Âñá": [0x7A, 0x13],
    "ÈÄâ": [0x7A, 0x14],
    "Á≥ü": [0x7A, 0x15],
    "Âéã": [0x7A, 0x16],
    "Âæ°": [0x7A, 0x17],
    "Êüì": [0x7A, 0x18],
    "Ê∂∏": [0x7A, 0x19],
    "Âæã": [0x7A, 0x1A],
    "Ëùô": [0x7A, 0x1B],
    "Âä£": [0x7A, 0x1C],
    "È™∏": [0x7A, 0x1D],
    "Âë®": [0x7A, 0x1E],
    "ÊäΩ": [0x7A, 0x1F],
    "ÁÇ≠": [0x7A, 0x20],
    "Êòº": [0x7A, 0x21],
    "Ê≥≥": [0x7A, 0x22],
    "Âåó": [0x7A, 0x23],
    "Ê≤õ": [0x7A, 0x24],
    "ÂûÑ": [0x7A, 0x25],
    "ÁΩö": [0x7A, 0x26],
    "Á∫µ": [0x7A, 0x27],
    "ÁõÜ": [0x7A, 0x28],
    "Âõî": [0x7A, 0x29],
    "ÁæΩ": [0x7A, 0x2A],
    "Êå´": [0x7A, 0x2B],
    "Êùû": [0x7A, 0x2C],
    "Âáå": [0x7A, 0x2D],
    "È°π": [0x7A, 0x2E],
    "ËåÅ": [0x7A, 0x2F],
    "Êç∑": [0x7A, 0x30],
    "Èªë": [0x7B, 0x01],
    "ÁÅ´": [0x7B, 0x02],
    "Èúπ": [0x7B, 0x03],
    "Ôºâ": [0x7B, 0x04],
    "ÂÆû": [0x7B, 0x05],
    "Ê∞∏": [0x7B, 0x06],
    "Âπ¥": [0x7B, 0x07],
    "ÂÜí": [0x7B, 0x08],
    "‰∏≠": [0x7B, 0x09],
    "Á≠î": [0x7B, 0x0A],
    "‰∏é": [0x7B, 0x0B],
    "Âàª": [0x7B, 0x0C],
    "Èöè": [0x7B, 0x0D],
    "Âãã": [0x7B, 0x0E],
    "Âí™": [0x7B, 0x0F],
    "Â≤õ": [0x7B, 0x10],
    "ÂÖ•": [0x7B, 0x11],
    "‰∏õ": [0x7B, 0x12],
    "Âè≠": [0x7B, 0x13],
    "Êã©": [0x7B, 0x14],
    "ÈÄÄ": [0x7B, 0x15],
    "Èõ™": [0x7B, 0x16],
    "Êç∂": [0x7B, 0x17],
    "Âúü": [0x7B, 0x18],
    "ÊØÅ": [0x7B, 0x19],
    "Ë™â": [0x7B, 0x1A],
    "Ëù†": [0x7B, 0x1B],
    "Áî©": [0x7B, 0x1C],
    "Áà¨": [0x7B, 0x1D],
    "Êé®": [0x7B, 0x1E],
    "Â±â": [0x7B, 0x1F],
    "Èô∑": [0x7B, 0x20],
    "Â°å": [0x7B, 0x21],
    "Â±Ç": [0x7B, 0x22],
    "Áó¥": [0x7B, 0x23],
    "Êû™": [0x7B, 0x24],
    "Èù¥": [0x7B, 0x25],
    "Ê∞ì": [0x7B, 0x26],
    "Âä´": [0x7B, 0x27],
    "Âπ¢": [0x7B, 0x28],
    "Êãò": [0x7B, 0x29],
    "Âò≠": [0x7B, 0x2A],
    "È¢ù": [0x7B, 0x2B],
    "Êºè": [0x7B, 0x2C],
    "ÂíØ": [0x7B, 0x2D],
    "Ê¶Ç": [0x7B, 0x2E],
    "ÂéÑ": [0x7B, 0x2F],
    "ÂæÑ": [0x7B, 0x30],
    "ÈªÑ": [0x7C, 0x01],
    "ÁÑ∞": [0x7C, 0x02],
    "Èõ≥": [0x7C, 0x03],
    "Áªì": [0x7C, 0x04],
    "ÊØè": [0x7C, 0x05],
    "Ëøú": [0x7C, 0x06],
    "Âô¢": [0x7C, 0x07],
    "Èô©": [0x7C, 0x08],
    "ËÆ©": [0x7C, 0x09],
    "Â∫î": [0x7C, 0x0A],
    "ÁùÄ": [0x7C, 0x0B],
    "‰πê": [0x7C, 0x0C],
    "Êäò": [0x7C, 0x0D],
    "Á´†": [0x7C, 0x0E],
    "„Éº": [0x7C, 0x0F],
    "ÈôÑ": [0x7C, 0x10],
    "Êïë": [0x7C, 0x11],
    "ÁàÜ": [0x7C, 0x12],
    "Èíü": [0x7C, 0x13],
    "Êîª": [0x7C, 0x14],
    "‰∏¥": [0x7C, 0x15],
    "Â∞ò": [0x7C, 0x16],
    "Êùø": [0x7C, 0x17],
    "Â£§": [0x7C, 0x18],
    "ÁÅ≠": [0x7C, 0x19],
    "Èì∂": [0x7C, 0x1A],
    "Ê†ñ": [0x7C, 0x1B],
    "Êàö": [0x7C, 0x1C],
    "ÁÉ¨": [0x7C, 0x1D],
    "Âû´": [0x7C, 0x1E],
    "Ëû∫": [0x7C, 0x1F],
    "Â±ï": [0x7C, 0x20],
    "ÂÄæ": [0x7C, 0x21],
    "ÈÅÆ": [0x7C, 0x22],
    "ÈÜâ": [0x7C, 0x23],
    "Â∫û": [0x7C, 0x24],
    "ÂÅè": [0x7C, 0x25],
    "Âõä": [0x7C, 0x26],
    "Âºì": [0x7C, 0x27],
    "Âåø": [0x7C, 0x28],
    "Ëà™": [0x7C, 0x29],
    "ÊâØ": [0x7C, 0x2A],
    "Êâ≠": [0x7C, 0x2B],
    "ÁÇâ": [0x7C, 0x2C],
    "Èûã": [0x7C, 0x2D],
    "Â≥°": [0x7C, 0x2E],
    "Âéö": [0x7C, 0x2F],
    "Êã¨": [0x7C, 0x30],
    "Áªø": [0x7D, 0x01],
    "Ê∞î": [0x7D, 0x02],
    "Â•≥": [0x7D, 0x03],
    "Êùü": [0x7D, 0x04],
    "ÊÑø": [0x7D, 0x05],
    "ËÆ∞": [0x7D, 0x06],
    "Áªß": [0x7D, 0x07],
    "Áªè": [0x7D, 0x08],
    "Â¶π": [0x7D, 0x09],
    "Êü•": [0x7D, 0x0A],
    "Êä±": [0x7D, 0x0B],
    "Ê∏∏": [0x7D, 0x0C],
    "Á£®": [0x7D, 0x0D],
    "Ëµö": [0x7D, 0x0E],
    "Âê¶": [0x7D, 0x0F],
    "Ëøë": [0x7D, 0x10],
    "È≠Ç": [0x7D, 0x11],
    "Ë£Ç": [0x7D, 0x12],
    "ÂΩ¢": [0x7D, 0x13],
    "Êïå": [0x7D, 0x14],
    "Êüú": [0x7D, 0x15],
    "Êóß": [0x7D, 0x16],
    "ËΩª": [0x7D, 0x17],
    "Âáâ": [0x7D, 0x18],
    "Â∏Ω": [0x7D, 0x19],
    "Á£Å": [0x7D, 0x1A],
    "È∏ü": [0x7D, 0x1B],
    "Áïô": [0x7D, 0x1C],
    "Èîê": [0x7D, 0x1D],
    "Ê£Ä": [0x7D, 0x1E],
    "Ê¢Ø": [0x7D, 0x1F],
    "Èõ®": [0x7D, 0x20],
    "Êñú": [0x7D, 0x21],
    "ÊÄú": [0x7D, 0x22],
    "Âçè": [0x7D, 0x23],
    "Âç∞": [0x7D, 0x24],
    "ÂÉª": [0x7D, 0x25],
    "ËØë": [0x7D, 0x26],
    "ÊÅ≠": [0x7D, 0x27],
    "Êâò": [0x7D, 0x28],
    "ÊÅí": [0x7D, 0x29],
    "Ëãó": [0x7D, 0x2A],
    "Á™É": [0x7D, 0x2B],
    "ÊÇÑ": [0x7D, 0x2C],
    "Â∞æ": [0x7D, 0x2D],
    "Êãê": [0x7D, 0x2E],
    "Èöô": [0x7D, 0x2F],
    "Â¥é": [0x7D, 0x30],
    "ÂÖÑ": [0x7E, 0x01],
    "Âåª": [0x7E, 0x02],
    "Â≠©": [0x7E, 0x03],
    "Âìá": [0x7E, 0x04],
    "Êúõ": [0x7E, 0x05],
    "Â∏å": [0x7E, 0x06],
    "Áª≠": [0x7E, 0x07],
    "ÂéÜ": [0x7E, 0x08],
    "Â§©": [0x7E, 0x09],
    "Â∞î": [0x7E, 0x0A],
    "Ê≠â": [0x7E, 0x0B],
    "Êâæ": [0x7E, 0x0C],
    "Âç¥": [0x7E, 0x0D],
    "Âà´": [0x7E, 0x0E],
    "Âî±": [0x7E, 0x0F],
    "ÊïÖ": [0x7E, 0x10],
    "Êåá": [0x7E, 0x11],
    "Ê§ç": [0x7E, 0x12],
    "Á≤â": [0x7E, 0x13],
    "Êó¶": [0x7E, 0x14],
    "Âè∞": [0x7E, 0x15],
    "Êäï": [0x7E, 0x16],
    "Áºì": [0x7E, 0x17],
    "ÁàΩ": [0x7E, 0x18],
    "Ëá≠": [0x7E, 0x19],
    "ÈôÖ": [0x7E, 0x1A],
    "Èîã": [0x7E, 0x1B],
    "ËÇÆ": [0x7E, 0x1C],
    "‰∏ë": [0x7E, 0x1D],
    "Ê†á": [0x7E, 0x1E],
    "Áªï": [0x7E, 0x1F],
    "Ëç´": [0x7E, 0x20],
    "Âù°": [0x7E, 0x21],
    "ÁØ±": [0x7E, 0x22],
    "Ëæõ": [0x7E, 0x23],
    "Â§è": [0x7E, 0x24],
    "Â∏Ö": [0x7E, 0x25],
    "ËØ¢": [0x7E, 0x26],
    "Èò∂": [0x7E, 0x27],
    "Â®á": [0x7E, 0x28],
    "Âè∏": [0x7E, 0x29],
    "Á∫¶": [0x7E, 0x2A],
    "Ë¥¢": [0x7E, 0x2B],
    "Êå†": [0x7E, 0x2C],
    "Âóñ": [0x7E, 0x2D],
    "Èì≠": [0x7E, 0x2E],
    "Ë∂æ": [0x7E, 0x2F],
    "Â≤ñ": [0x7E, 0x30],
    "Âºü": [0x7F, 0x01],
    "Áñó": [0x7F, 0x02],
    "Âç°": [0x7F, 0x03],
    "Âíî": [0x7F, 0x04],
    "ÈÉΩ": [0x7F, 0x05],
    "‰ª∂": [0x7F, 0x06],
    "ÊÉ≥": [0x7F, 0x07],
    "Âüé": [0x7F, 0x08],
    "ÂëÄ": [0x7F, 0x09],
    "Âçö": [0x7F, 0x0A],
    "ÂØÜ": [0x7F, 0x0B],
    "‰ªä": [0x7F, 0x0C],
    "Êùæ": [0x7F, 0x0D],
    "Ëø´": [0x7F, 0x0E],
    "Ê≠å": [0x7F, 0x0F],
    "Êµ™": [0x7F, 0x10],
    "Ë∑ë": [0x7F, 0x11],
    "Âá†": [0x7F, 0x12],
    "Êáí": [0x7F, 0x13],
    "Ë∏©": [0x7F, 0x14],
    "Âõ∫": [0x7F, 0x15],
    "Êé∑": [0x7F, 0x16],
    "ËäÇ": [0x7F, 0x17],
    "Èò≥": [0x7F, 0x18],
    "ÁØÆ": [0x7F, 0x19],
    "Êï≤": [0x7F, 0x1A],
    "Áà™": [0x7F, 0x1B],
    "ËÑè": [0x7F, 0x1C],
    "Èôã": [0x7F, 0x1D],
    "Áºù": [0x7F, 0x1E],
    "Âúà": [0x7F, 0x1F],
    "Âû†": [0x7F, 0x20],
    "Â¥©": [0x7F, 0x21],
    "ÂñÑ": [0x7F, 0x22],
    "‰æç": [0x7F, 0x23],
    "Á±Å": [0x7F, 0x24],
    "‰∏∞": [0x7F, 0x25],
    "ËÇ≤": [0x7F, 0x26],
    "‰∫è": [0x7F, 0x27],
    "Ë∞ö": [0x7F, 0x28],
    "Ê∏°": [0x7F, 0x29],
    "Âèõ": [0x7F, 0x2A],
    "ÊãØ": [0x7F, 0x2B],
    "ÈóØ": [0x7F, 0x2C],
    "ËØÖ": [0x7F, 0x2D],
    "Áü´": [0x7F, 0x2E],
    "Êâ¨": [0x7F, 0x2F],
    "ËÑä": [0x7F, 0x30],
    "Ëõã": [0x80, 0x01],
    "ÁÅØ": [0x80, 0x02],
    "Á±≥": [0x80, 0x03],
    "Êàò": [0x80, 0x04],
    "Ë¶Å": [0x80, 0x05],
    "‰∫ã": [0x80, 0x06],
    "ÂÄô": [0x80, 0x07],
    "Â†°": [0x80, 0x08],
    "ÈÇÄ": [0x80, 0x09],
    "Â£´": [0x80, 0x0A],
    "Áà±": [0x80, 0x0B],
    "ÁªÉ": [0x80, 0x0C],
    "Âè£": [0x80, 0x0D],
    "ÂÖ∏": [0x80, 0x0E],
    "ÊÄØ": [0x80, 0x0F],
    "Êº´": [0x80, 0x10],
    "ËÖø": [0x80, 0x11],
    "Êèè": [0x80, 0x12],
    "Êï£": [0x80, 0x13],
    "ÂáÜ": [0x80, 0x14],
    "Â≠™": [0x80, 0x15],
    "ÈÄ†": [0x80, 0x16],
    "ÁúÅ": [0x80, 0x17],
    "ÁÅø": [0x80, 0x18],
    "Èùô": [0x80, 0x19],
    "‰∏á": [0x80, 0x1A],
    "Â≠µ": [0x80, 0x1B],
    "Â∑®": [0x80, 0x1C],
    "Êãº": [0x80, 0x1D],
    "ÁÆ±": [0x80, 0x1E],
    "ÁªÑ": [0x80, 0x1F],
    "Êâé": [0x80, 0x20],
    "Â∞∫": [0x80, 0x21],
    "Ê©ò": [0x80, 0x22],
    "Êåë": [0x80, 0x23],
    "Ëê¶": [0x80, 0x24],
    "ËÇå": [0x80, 0x25],
    "ÊÇç": [0x80, 0x26],
    "Âè∑": [0x80, 0x27],
    "Ê∂¶": [0x80, 0x28],
    "ÊãÇ": [0x80, 0x29],
    "Ë∞Ö": [0x80, 0x2A],
    "ÈîÖ": [0x80, 0x2B],
    "Âë∏": [0x80, 0x2C],
    "Áàµ": [0x80, 0x2D],
    "ÂØÇ": [0x80, 0x2E],
    "Ê≥Ω": [0x80, 0x2F],
    "Áüó": [0x80, 0x30],
    "‰ªî": [0x81, 0x01],
    "Á¨º": [0x81, 0x02],
    "Ê¨ß": [0x81, 0x03],
    "ËΩ¶": [0x81, 0x04],
    "ÂΩì": [0x81, 0x05],
    "Âæó": [0x81, 0x06],
    "Êúâ": [0x81, 0x07],
    "ÊÅ¢": [0x81, 0x08],
    "ËØ∑": [0x81, 0x09],
    "ÂæÖ": [0x81, 0x0A],
    "Áà∑": [0x81, 0x0B],
    "ÂöØ": [0x81, 0x0C],
    "ÊØï": [0x81, 0x0D],
    "ÊÆµ": [0x81, 0x0E],
    "Âú∫": [0x81, 0x0F],
    "Â£Æ": [0x81, 0x10],
    "Áõë": [0x81, 0x11],
    "Ëø∞": [0x81, 0x12],
    "‰∏ì": [0x81, 0x13],
    "Êåâ": [0x81, 0x14],
    "Â∑∑": [0x81, 0x15],
    "ÂúÜ": [0x81, 0x16],
    "È¢ë": [0x81, 0x17],
    "ÁÉÇ": [0x81, 0x18],
    "ÊÅê": [0x81, 0x19],
    "È∫ª": [0x81, 0x1A],
    "Âè¨": [0x81, 0x1B],
    "Êúµ": [0x81, 0x1C],
    "Áåõ": [0x81, 0x1D],
    "Áõí": [0x81, 0x1E],
    "Á≠ë": [0x81, 0x1F],
    "ÂÑø": [0x81, 0x20],
    "ÂØ∏": [0x81, 0x21],
    "Á´û": [0x81, 0x22],
    "Ë¥∏": [0x81, 0x23],
    "Êãõ": [0x81, 0x24],
    "ËÇâ": [0x81, 0x25],
    "Âìß": [0x81, 0x26],
    "Ëôî": [0x81, 0x27],
    "Ê≤ê": [0x81, 0x28],
    "Ê∂Ø": [0x81, 0x29],
    "Êì¶": [0x81, 0x2A],
    "ÂÜ¨": [0x81, 0x2B],
    "Êâº": [0x81, 0x2C],
    "ÁÅæ": [0x81, 0x2D],
    "ÂØû": [0x81, 0x2E],
    "ÂûÆ": [0x81, 0x2F],
    "Á∫†": [0x81, 0x30],
    "Èºπ": [0x82, 0x01],
    "È¨º": [0x82, 0x02],
    "Ëãè": [0x82, 0x03],
    "Ê≥°": [0x82, 0x04],
    "ÈÅ•": [0x82, 0x05],
    "Âà∞": [0x82, 0x06],
    "Á≠â": [0x82, 0x07],
    "Â§ç": [0x82, 0x08],
    "‰∏æ": [0x82, 0x09],
    "Â∫ü": [0x82, 0x0A],
    "Ê¨£": [0x82, 0x0B],
    "ÂïÜ": [0x82, 0x0C],
    "Á´ü": [0x82, 0x0D],
    "Ë∂£": [0x82, 0x0E],
    "ÊãÖ": [0x82, 0x0F],
    "ËßÇ": [0x82, 0x10],
    "Áã±": [0x82, 0x11],
    "Êà¥": [0x82, 0x12],
    "Ê®™": [0x82, 0x13],
    "Âë≥": [0x82, 0x14],
    "ÊÉú": [0x82, 0x15],
    "ÊöÇ": [0x82, 0x16],
    "ÂÅ∂": [0x82, 0x17],
    "ÁÆó": [0x82, 0x18],
    "ËÉ∂": [0x82, 0x19],
    "Áóπ": [0x82, 0x1A],
    "Âî§": [0x82, 0x1B],
    "Ê£µ": [0x82, 0x1C],
    "ÊÄÄ": [0x82, 0x1D],
    "ÊëÜ": [0x82, 0x1E],
    "Êª¥": [0x82, 0x1F],
    "Âó¨": [0x82, 0x20],
    "Ëúò": [0x82, 0x21],
    "Èù©": [0x82, 0x22],
    "Êçè": [0x82, 0x23],
    "Ë£Å": [0x82, 0x24],
    "Ê¢≠": [0x82, 0x25],
    "Êïû": [0x82, 0x26],
    "Âìº": [0x82, 0x27],
    "‰∫í": [0x82, 0x28],
    "Èí©": [0x82, 0x29],
    "Èì∫": [0x82, 0x2A],
    "Â≠£": [0x82, 0x2B],
    "Âòé": [0x82, 0x2C],
    "ÊùÉ": [0x82, 0x2D],
    "Ëå¨": [0x82, 0x2E],
    "‰øä": [0x82, 0x2F],
    "ÂÉß": [0x82, 0x30],
    "Èº†": [0x83, 0x01],
    "Â∞Ü": [0x83, 0x02],
    "Ëéé": [0x83, 0x03],
    "Èòü": [0x83, 0x04],
    "Â§ú": [0x83, 0x05],
    "‰πü": [0x83, 0x06],
    "Âéª": [0x83, 0x07],
    "Âéü": [0x83, 0x08],
    "Âäû": [0x83, 0x09],
    "ËØù": [0x83, 0x0A],
    "Âñú": [0x83, 0x0B],
    "Â∫ó": [0x83, 0x0C],
    "Âèò": [0x83, 0x0D],
    "Âìü": [0x83, 0x0E],
    "Áö±": [0x83, 0x0F],
    "‚ùù": [0x83, 0x10],
    "Ë∫´": [0x83, 0x11],
    "ËÉ∏": [0x83, 0x12],
    "‰πè": [0x83, 0x13],
    "Áû¨": [0x83, 0x14],
    "ÈÅµ": [0x83, 0x15],
    "Èôç": [0x83, 0x16],
    "Âçä": [0x83, 0x17],
    "Âô®": [0x83, 0x18],
    "Áöá": [0x83, 0x19],
    "ÁøÖ": [0x83, 0x1A],
    "Âø†": [0x83, 0x1B],
    "‰ªç": [0x83, 0x1C],
    "Áªö": [0x83, 0x1D],
    "ËÑÜ": [0x83, 0x1E],
    "Êπø": [0x83, 0x1F],
    "‰∏ò": [0x83, 0x20],
    "Ëõõ": [0x83, 0x21],
    "Á¥´": [0x83, 0x22],
    "Ëâ∞": [0x83, 0x23],
    "Âà§": [0x83, 0x24],
    "Â±û": [0x83, 0x25],
    "Êá¶": [0x83, 0x26],
    "Êíí": [0x83, 0x27],
    "Á®≥": [0x83, 0x28],
    "Ëæà": [0x83, 0x29],
    "Ê†è": [0x83, 0x2A],
    "ÂÜå": [0x83, 0x2B],
    "Âê±": [0x83, 0x2C],
    "Á•à": [0x83, 0x2D],
    "Âíô": [0x83, 0x2E],
    "Â≠î": [0x83, 0x2F],
    "ÊºÜ": [0x83, 0x30],
    "Â≤©": [0x84, 0x01],
    "ÂÜõ": [0x84, 0x02],
    "Èòø": [0x84, 0x03],
    "Ê¥û": [0x84, 0x04],
    "Á©∫": [0x84, 0x05],
    "ËÆ∏": [0x84, 0x06],
    "ËØ•": [0x84, 0x07],
    "Ë≤å": [0x84, 0x08],
    "Ë¢´": [0x84, 0x09],
    "ËÉ°": [0x84, 0x0A],
    "Ëã•": [0x84, 0x0B],
    "Ëê•": [0x84, 0x0C],
    "Â≠§": [0x84, 0x0D],
    "Áâπ": [0x84, 0x0E],
    "Áúâ": [0x84, 0x0F],
    "Á∫∏": [0x84, 0x10],
    "Á´ô": [0x84, 0x11],
    "Èíà": [0x84, 0x12],
    "‰∫å": [0x84, 0x13],
    "Âáè": [0x84, 0x14],
    "‰ª∑": [0x84, 0x15],
    "Áá•": [0x84, 0x16],
    "Êä¢": [0x84, 0x17],
    "Áø°": [0x84, 0x18],
    "ËÖå": [0x84, 0x19],
    "ËÜÄ": [0x84, 0x1A],
    "Ê†π": [0x84, 0x1B],
    "‰πò": [0x84, 0x1C],
    "ÁõØ": [0x84, 0x1D],
    "Èìô": [0x84, 0x1E],
    "Ê≤≥": [0x84, 0x1F],
    "Êôí": [0x84, 0x20],
    "ÁΩë": [0x84, 0x21],
    "Â∫è": [0x84, 0x22],
    "Êé†": [0x84, 0x23],
    "Ëµñ": [0x84, 0x24],
    "È™ó": [0x84, 0x25],
    "Âëµ": [0x84, 0x26],
    "ÂÖÜ": [0x84, 0x27],
    "Êü±": [0x84, 0x28],
    "ËÆΩ": [0x84, 0x29],
    "ËøÑ": [0x84, 0x2A],
    "È©±": [0x84, 0x2B],
    "Ê†°": [0x84, 0x2C],
    "Á•∑": [0x84, 0x2D],
    "‰∫ö": [0x84, 0x2E],
    "Ê∫â": [0x84, 0x2F],
    "ÂêØ": [0x84, 0x30],
    "Áü≥": [0x85, 0x01],
    "Âõ¢": [0x85, 0x02],
    "Âß®": [0x85, 0x03],
    "Âì¶": [0x85, 0x04],
    "Êó∂": [0x85, 0x05],
    "ËßÑ": [0x85, 0x06],
    "ÂÜç": [0x85, 0x07],
    "ÂÆâ": [0x85, 0x08],
    "ÂèÇ": [0x85, 0x09],
    "ÂÖ´": [0x85, 0x0A],
    "Âì™": [0x85, 0x0B],
    "‰∏ö": [0x85, 0x0C],
    "Áã¨": [0x85, 0x0D],
    "È≤ú": [0x85, 0x0E],
    "ËØÜ": [0x85, 0x0F],
    "Áâá": [0x85, 0x10],
    "ÁõÆ": [0x85, 0x11],
    "Êàè": [0x85, 0x12],
    "Áôæ": [0x85, 0x13],
    "Â∑ß": [0x85, 0x14],
    "Ëëó": [0x85, 0x15],
    "Êªã": [0x85, 0x16],
    "Êòè": [0x85, 0x17],
    "Áø†": [0x85, 0x18],
    "Ë±™": [0x85, 0x19],
    "Áãº": [0x85, 0x1A],
    "ÊÄ®": [0x85, 0x1B],
    "Â∞ñ": [0x85, 0x1C],
    "ÂâØ": [0x85, 0x1D],
    "Èíπ": [0x85, 0x1E],
    "ÁéØ": [0x85, 0x1F],
    "ÈÉÅ": [0x85, 0x20],
    "Â∑°": [0x85, 0x21],
    "Ê∑π": [0x85, 0x22],
    "Â•â": [0x85, 0x23],
    "Ë¥ß": [0x85, 0x24],
    "È™ë": [0x85, 0x25],
    "ÊÑ§": [0x85, 0x26],
    "Âöì": [0x85, 0x27],
    "ËΩÆ": [0x85, 0x28],
    "Âóì": [0x85, 0x29],
    "ËÖ∞": [0x85, 0x2A],
    "Ê°£": [0x85, 0x2B],
    "Á¢ó": [0x85, 0x2C],
    "Ê∞ß": [0x85, 0x2D],
    "Âçü": [0x85, 0x2E],
    "Ë∞ã": [0x85, 0x2F],
    "Êçï": [0x85, 0x30],
    "ÁêÉ": [0x86, 0x01],
    "Âè†": [0x86, 0x02],
    "ÊØî": [0x86, 0x03],
    "Ôºå": [0x86, 0x04],
    "Áü•": [0x86, 0x05],
    "Áü©": [0x86, 0x06],
    "ËßÅ": [0x86, 0x07],
    "ÊúÄ": [0x86, 0x08],
    "‰∫é": [0x86, 0x09],
    "ÁäØ": [0x86, 0x0A],
    "ÂëÜ": [0x86, 0x0B],
    "ÊÄª": [0x86, 0x0C],
    "Áà∏": [0x86, 0x0D],
    "ÊÆä": [0x86, 0x0E],
    "ÊΩÆ": [0x86, 0x0F],
    "‚ùû": [0x86, 0x10],
    "ÂΩï": [0x86, 0x11],
    "ÂÆ§": [0x86, 0x12],
    "Âêà": [0x86, 0x13],
    "‰æù": [0x86, 0x14],
    "Êî∂": [0x86, 0x15],
    "Ë°•": [0x86, 0x16],
    "ÂÜ≤": [0x86, 0x17],
    "Èõï": [0x86, 0x18],
    "Âçé": [0x86, 0x19],
    "Á±ç": [0x86, 0x1A],
    "ÊÅ®": [0x86, 0x1B],
    "Âç∑": [0x86, 0x1C],
    "ÊôØ": [0x86, 0x1D],
    "ËÇ©": [0x86, 0x1E],
    "Â¢É": [0x86, 0x1F],
    "Ëë±": [0x86, 0x20],
    "ÈÄª": [0x86, 0x21],
    "Âï∞": [0x86, 0x22],
    "Âè•": [0x86, 0x23],
    "ÂÆæ": [0x86, 0x24],
    "Á´•": [0x86, 0x25],
    "ÊÄí": [0x86, 0x26],
    "Âçø": [0x86, 0x27],
    "Âò∂": [0x86, 0x28],
    "Ëíô": [0x86, 0x29],
    "Êâõ": [0x86, 0x2A],
    "ÂÆò": [0x86, 0x2B],
    "È™§": [0x86, 0x2C],
    "Âò≤": [0x86, 0x2D],
    "ÁÇô": [0x86, 0x2E],
    "Á∫±": [0x86, 0x2F],
    "Â≥ª": [0x86, 0x30],
    "Áõó": [0x87, 0x01],
    "ÁΩó": [0x87, 0x02],
    "Â∏ï": [0x87, 0x03],
    "ÔºÅ": [0x87, 0x04],
    "ÈÅì": [0x87, 0x05],
    "ÁÇπ": [0x87, 0x06],
    "‰∫Æ": [0x87, 0x07],
    "Âêé": [0x87, 0x08],
    "ÂÖà": [0x87, 0x09],
    "ÂÇª": [0x87, 0x0A],
    "‰Ωè": [0x87, 0x0B],
    "‰π∞": [0x87, 0x0C],
    "ËÆ®": [0x87, 0x0D],
    "Êúü": [0x87, 0x0E],
    "„ÄÅ": [0x87, 0x0F],
    "ËÆ§": [0x87, 0x10],
    "Èü≥": [0x87, 0x11],
    "ÁÆ°": [0x87, 0x12],
    "Áé´": [0x87, 0x13],
    "Èù†": [0x87, 0x14],
    "Êç¢": [0x87, 0x15],
    "Ê≤ª": [0x87, 0x16],
    "Ë∑ù": [0x87, 0x17],
    "Ê°∂": [0x87, 0x18],
    "Êµì": [0x87, 0x19],
    "Èòª": [0x87, 0x1A],
    "ÂíÑ": [0x87, 0x1B],
    "È•ø": [0x87, 0x1C],
    "‰Ω©": [0x87, 0x1D],
    "Áì£": [0x87, 0x1E],
    "Âëï": [0x87, 0x1F],
    "Êæà": [0x87, 0x20],
    "È•≠": [0x87, 0x21],
    "Á†ç": [0x87, 0x22],
    "Ë¥≠": [0x87, 0x23],
    "Êµ¥": [0x87, 0x24],
    "ÊÇî": [0x87, 0x25],
    "Êù∞": [0x87, 0x26],
    "ÊÉ®": [0x87, 0x27],
    "È∏£": [0x87, 0x28],
    "ËØç": [0x87, 0x29],
    "Â¥ñ": [0x87, 0x2A],
    "ÈÅ£": [0x87, 0x2B],
    "Â±ä": [0x87, 0x2C],
    "Êô∞": [0x87, 0x2D],
    "Ê≥Ñ": [0x87, 0x2E],
    "Êµ∏": [0x87, 0x2F],
    "Â™≤": [0x87, 0x30],
    "Ë¥º": [0x88, 0x01],
    "Ê±â": [0x88, 0x02],
    "Áëû": [0x88, 0x03],
    "Ë∞¢": [0x88, 0x04],
    "Èó™": [0x88, 0x05],
    "‰ΩÜ": [0x88, 0x06],
    "ÁÖß": [0x88, 0x07],
    "ËÉú": [0x88, 0x08],
    "Êµã": [0x88, 0x09],
    "Êãí": [0x88, 0x0A],
    "Á¥ß": [0x88, 0x0B],
    "‰∏ú": [0x88, 0x0C],
    "Âéå": [0x88, 0x0D],
    "Â±Ä": [0x88, 0x0E],
    "Âç≥": [0x88, 0x0F],
    "ÈîÅ": [0x88, 0x10],
    "Â¥á": [0x88, 0x11],
    "‰ø±": [0x88, 0x12],
    "Áë∞": [0x88, 0x13],
    "Êëá": [0x88, 0x14],
    "‰∫ß": [0x88, 0x15],
    "ÊÑà": [0x88, 0x16],
    "Á¶ª": [0x88, 0x17],
    "Â∑æ": [0x88, 0x18],
    "È•º": [0x88, 0x19],
    "Ëôö": [0x88, 0x1A],
    "Áâô": [0x88, 0x1B],
    "Ëõ∞": [0x88, 0x1C],
    "ÁåÆ": [0x88, 0x1D],
    "ÂÉµ": [0x88, 0x1E],
    "Ëàí": [0x88, 0x1F],
    "Â≤Å": [0x88, 0x20],
    "Â∏ò": [0x88, 0x21],
    "ÊÉπ": [0x88, 0x22],
    "ÂØÑ": [0x88, 0x23],
    "Êä•": [0x88, 0x24],
    "Ëå∏": [0x88, 0x25],
    "ÂÆÅ": [0x88, 0x26],
    "Êò®": [0x88, 0x27],
    "ÁÉü": [0x88, 0x28],
    "ÁÅå": [0x88, 0x29],
    "Ëë°": [0x88, 0x2A],
    "Ë∏¢": [0x88, 0x2B],
    "Áø∞": [0x88, 0x2C],
    "Áßë": [0x88, 0x2D],
    "È••": [0x88, 0x2E],
    "Ê¥™": [0x88, 0x2F],
    "Êã¶": [0x88, 0x30],
    "Êú®": [0x89, 0x01],
    "È´ò": [0x89, 0x02],
    "Â°î": [0x89, 0x03],
    "‰Ω†": [0x89, 0x04],
    "ËÄÄ": [0x89, 0x05],
    "Âèë": [0x89, 0x06],
    "Ëøò": [0x89, 0x07],
    "Âà©": [0x89, 0x08],
    "ÂÆ´": [0x89, 0x09],
    "Â§±": [0x89, 0x0A],
    "Âº†": [0x89, 0x0B],
    "Ë•ø": [0x89, 0x0C],
    "‰øù": [0x89, 0x0D],
    "È°æ": [0x89, 0x0E],
    "Ë∑≥": [0x89, 0x0F],
    "Áâ¢": [0x89, 0x10],
    "ÊìÖ": [0x89, 0x11],
    "ÈÉ®": [0x89, 0x12],
    "Ëé≤": [0x89, 0x13],
    "ÊùÜ": [0x89, 0x14],
    "Âèç": [0x89, 0x15],
    "Ëêé": [0x89, 0x16],
    "Âàô": [0x89, 0x17],
    "‰ºû": [0x89, 0x18],
    "Ëç∑": [0x89, 0x19],
    "ÊÄù": [0x89, 0x1A],
    "ÈΩø": [0x89, 0x1B],
    "Ëøà": [0x89, 0x1C],
    "Á´Ø": [0x89, 0x1D],
    "ÂíÄ": [0x89, 0x1E],
    "ÊåØ": [0x89, 0x1F],
    "Êöë": [0x89, 0x20],
    "Ê°å": [0x89, 0x21],
    "Ë¶Ü": [0x89, 0x22],
    "Áô´": [0x89, 0x23],
    "Âêù": [0x89, 0x24],
    "Êµë": [0x89, 0x25],
    "Èô™": [0x89, 0x26],
    "Ê£ï": [0x89, 0x27],
    "ÂÖΩ": [0x89, 0x28],
    "ÈìÖ": [0x89, 0x29],
    "ËêÑ": [0x89, 0x2A],
    "Ê∂®": [0x89, 0x2B],
    "‰πù": [0x89, 0x2C],
    "Âëª": [0x89, 0x2D],
    "Âí¶": [0x89, 0x2E],
    "ÊÅï": [0x89, 0x2F],
    "Êµá": [0x89, 0x30],
    "‰πÉ": [0x8A, 0x01],
    "Ë∑∑": [0x8A, 0x02],
    "Â¶û": [0x8A, 0x03],
    "Êàê": [0x8A, 0x04],
    "Ê≠£": [0x8A, 0x05],
    "Áîü": [0x8A, 0x06],
    "Ê°É": [0x8A, 0x07],
    "Ë±°": [0x8A, 0x08],
    "ÊÆø": [0x8A, 0x09],
    "Á§º": [0x8A, 0x0A],
    "Âàö": [0x8A, 0x0B],
    "ÂÆ¥": [0x8A, 0x0C],
    "Êä§": [0x8A, 0x0D],
    "Á≥ä": [0x8A, 0x0E],
    "È•Æ": [0x8A, 0x0F],
    "Âô©": [0x8A, 0x10],
    "Ë∫≤": [0x8A, 0x11],
    "Á≥ª": [0x8A, 0x12],
    "Ëèü": [0x8A, 0x13],
    "Áßª": [0x8A, 0x14],
    "Â¢û": [0x8A, 0x15],
    "Áº©": [0x8A, 0x16],
    "‰ºê": [0x8A, 0x17],
    "ËØó": [0x8A, 0x18],
    "Êãâ": [0x8A, 0x19],
    "‰ªò": [0x8A, 0x1A],
    "Âí¨": [0x8A, 0x1B],
    "Âàõ": [0x8A, 0x1C],
    "Âá∂": [0x8A, 0x1D],
    "Âöº": [0x8A, 0x1E],
    "ÁÜ¨": [0x8A, 0x1F],
    "Âæ∑": [0x8A, 0x20],
    "‰∫ï": [0x8A, 0x21],
    "Êπñ": [0x8A, 0x22],
    "ÂÆ£": [0x8A, 0x23],
    "Âï¨": [0x8A, 0x24],
    "Âë±": [0x8A, 0x25],
    "Èó∑": [0x8A, 0x26],
    "Ê¶à": [0x8A, 0x27],
    "Âèî": [0x8A, 0x28],
    "Êó∑": [0x8A, 0x29],
    "Â¶Ü": [0x8A, 0x2A],
    "ÁÉÅ": [0x8A, 0x2B],
    "Âòâ": [0x8A, 0x2C],
    "Âêü": [0x8A, 0x2D],
    "ËÖ•": [0x8A, 0x2E],
    "ÈÄÜ": [0x8A, 0x2F],
    "Áº≠": [0x8A, 0x30],
    "‰ºä": [0x8B, 0x01],
    "Âô¨": [0x8B, 0x02],
    "Âíª": [0x8B, 0x03],
    "Âäü": [0x8B, 0x04],
    "‰∏∫": [0x8B, 0x05],
    "ËÉΩ": [0x8B, 0x06],
    "ÂÖ¨": [0x8B, 0x07],
    "Â∑≤": [0x8B, 0x08],
    "Èúú": [0x8B, 0x09],
    "ÂçÉ": [0x8B, 0x0A],
    "Èïá": [0x8B, 0x0B],
    "Ê¨¢": [0x8B, 0x0C],
    "Âè´": [0x8B, 0x0D],
    "Ê∂Ç": [0x8B, 0x0E],
    "ÂëΩ": [0x8B, 0x0F],
    "ÂÜ≥": [0x8B, 0x10],
    "Ëóè": [0x8B, 0x11],
    "ËØû": [0x8B, 0x12],
    "Âºó": [0x8B, 0x13],
    "ÂÜµ": [0x8B, 0x14],
    "Âü∫": [0x8B, 0x15],
    "ÊµÜ": [0x8B, 0x16],
    "Á¢∞": [0x8B, 0x17],
    "Áõê": [0x8B, 0x18],
    "‰ªÅ": [0x8B, 0x19],
    "Áè≠": [0x8B, 0x1A],
    "Êúù": [0x8B, 0x1B],
    "ÈìÅ": [0x8B, 0x1C],
    "ÂëÉ": [0x8B, 0x1D],
    "Áº†": [0x8B, 0x1E],
    "ÂûÉ": [0x8B, 0x1F],
    "Èò±": [0x8B, 0x20],
    "Êë∏": [0x8B, 0x21],
    "Ê∫ú": [0x8B, 0x22],
    "ÊÅã": [0x8B, 0x23],
    "‰æã": [0x8B, 0x24],
    "È¶Ü": [0x8B, 0x25],
    "Â∫≠": [0x8B, 0x26],
    "Ë¢ã": [0x8B, 0x27],
    "Áöô": [0x8B, 0x28],
    "ÊÄ°": [0x8B, 0x29],
    "Âå£": [0x8B, 0x2A],
    "ÊñΩ": [0x8B, 0x2B],
    "Â≤ó": [0x8B, 0x2C],
    "Âàù": [0x8B, 0x2D],
    "Á•ü": [0x8B, 0x2E],
    "Ë¥Ø": [0x8B, 0x2F],
    "ÂæΩ": [0x8B, 0x30],
    "Èí¢": [0x8C, 0x01],
    "Ëçâ": [0x8C, 0x02],
    "ÂÉè": [0x8C, 0x03],
    "‰∫Ü": [0x8C, 0x04],
    "Âãá": [0x8C, 0x05],
    "ÊÄß": [0x8C, 0x06],
    "‰∏ª": [0x8C, 0x07],
    "ÂæÄ": [0x8C, 0x08],
    "Â∫¶": [0x8C, 0x09],
    "ËΩΩ": [0x8C, 0x0A],
    "Á®ç": [0x8C, 0x0B],
    "Â§Ñ": [0x8C, 0x0C],
    "Êªö": [0x8C, 0x0D],
    "Âçà": [0x8C, 0x0E],
    "Êù°": [0x8C, 0x0F],
    "Âùê": [0x8C, 0x10],
    "Â¢ü": [0x8C, 0x11],
    "ÂÖ±": [0x8C, 0x12],
    "Ëπà": [0x8C, 0x13],
    "‰π†": [0x8C, 0x14],
    "Êú¨": [0x8C, 0x15],
    "Êû´": [0x8C, 0x16],
    "Ëß¶": [0x8C, 0x17],
    "È∏°": [0x8C, 0x18],
    "ÁÖÆ": [0x8C, 0x19],
    "Áøª": [0x8C, 0x1A],
    "Ê¥ã": [0x8C, 0x1B],
    "Âêû": [0x8C, 0x1C],
    "Á∫ø": [0x8C, 0x1D],
    "Êáà": [0x8C, 0x1E],
    "Âúæ": [0x8C, 0x1F],
    "Ë∞ú": [0x8C, 0x20],
    "ÂáÄ": [0x8C, 0x21],
    "Ëûç": [0x8C, 0x22],
    "ËÄª": [0x8C, 0x23],
    "‰πâ": [0x8C, 0x24],
    "Êüî": [0x8C, 0x25],
    "Êµé": [0x8C, 0x26],
    "ÈòÅ": [0x8C, 0x27],
    "Êñë": [0x8C, 0x28],
    "ÂìÄ": [0x8C, 0x29],
    "Èöú": [0x8C, 0x2A],
    "Ëãç": [0x8C, 0x2B],
    "Ë∞®": [0x8C, 0x2C],
    "Ë∂ü": [0x8C, 0x2D],
    "Ê±ó": [0x8C, 0x2E],
    "ËñÑ": [0x8C, 0x2F],
    "Âà†": [0x8C, 0x30],
    "Áõî": [0x8D, 0x01],
    "‰º™": [0x8D, 0x02],
    "Âó¶": [0x8D, 0x03],
    "Âõû": [0x8D, 0x04],
    "Êï¢": [0x8D, 0x05],
    "ÂæÆ": [0x8D, 0x06],
    "ÈúÄ": [0x8D, 0x07],
    "Êó•": [0x8D, 0x08],
    "Ë¥ü": [0x8D, 0x09],
    "ÈÄ¢": [0x8D, 0x0A],
    "‰ºë": [0x8D, 0x0B],
    "Ë∞à": [0x8D, 0x0C],
    "Êâ∞": [0x8D, 0x0D],
    "‰ª£": [0x8D, 0x0E],
    "È≤∏": [0x8D, 0x0F],
    "ÂêÉ": [0x8D, 0x10],
    "Ê£∫": [0x8D, 0x11],
    "Ë∑É": [0x8D, 0x12],
    "Êõ≤": [0x8D, 0x13],
    "Êéå": [0x8D, 0x14],
    "Ê∑∑": [0x8D, 0x15],
    "ÂÖª": [0x8D, 0x16],
    "ÂÄç": [0x8D, 0x17],
    "‰π≥": [0x8D, 0x18],
    "ËìÑ": [0x8D, 0x19],
    "ÂÆπ": [0x8D, 0x1A],
    "ÂèÆ": [0x8D, 0x1B],
    "È£ò": [0x8D, 0x1C],
    "Ë¥π": [0x8D, 0x1D],
    "Âüü": [0x8D, 0x1E],
    "ËÑñ": [0x8D, 0x1F],
    "Âñª": [0x8D, 0x20],
    "Áª¥": [0x8D, 0x21],
    "Â†Ü": [0x8D, 0x22],
    "Áæû": [0x8D, 0x23],
    "Âòà": [0x8D, 0x24],
    "Ëåé": [0x8D, 0x25],
    "ÈÄõ": [0x8D, 0x26],
    "Ëøü": [0x8D, 0x27],
    "ÂÖÅ": [0x8D, 0x28],
    "Èªò": [0x8D, 0x29],
    "Áßã": [0x8D, 0x2A],
    "ÂÇ≤": [0x8D, 0x2B],
    "ÊÖé": [0x8D, 0x2C],
    "Âôó": [0x8D, 0x2D],
    "ËæÜ": [0x8D, 0x2E],
    "Êèç": [0x8D, 0x2F],
    "„Éª": [0x8D, 0x30],
    "Áî≤": [0x8E, 0x01],
    "Ë£Ö": [0x8E, 0x02],
    "Ê∞¥": [0x8E, 0x03],
    "Êàë": [0x8E, 0x04],
    "ËÄå": [0x8E, 0x05],
    "‰πé": [0x8E, 0x06],
    "Â∏Æ": [0x8E, 0x07],
    "Ê¥ª": [0x8E, 0x08],
    "Ë¥£": [0x8E, 0x09],
    "Ëµ∂": [0x8E, 0x0A],
    "Ëßâ": [0x8E, 0x0B],
    "Á°Æ": [0x8E, 0x0C],
    "ËÄΩ": [0x8E, 0x0D],
    "Èáé": [0x8E, 0x0E],
    "È±º": [0x8E, 0x0F],
    "Âà®": [0x8E, 0x10],
    "Êùê": [0x8E, 0x11],
    "Êâ´": [0x8E, 0x12],
    "Êºî": [0x8E, 0x13],
    "Êè°": [0x8E, 0x14],
    "ÂºÑ": [0x8E, 0x15],
    "Ëä≥": [0x8E, 0x16],
    "ÈÄÉ": [0x8E, 0x17],
    "ÈÖ™": [0x8E, 0x18],
    "Áæ§": [0x8E, 0x19],
    "ËøÖ": [0x8E, 0x1A],
    "ËõÆ": [0x8E, 0x1B],
    "ËÄÉ": [0x8E, 0x1C],
    "Á¨®": [0x8E, 0x1D],
    "ÂæÅ": [0x8E, 0x1E],
    "Â°ò": [0x8E, 0x1F],
    "Êà∑": [0x8E, 0x20],
    "Êåñ": [0x8E, 0x21],
    "Êªë": [0x8E, 0x22],
    "Âºï": [0x8E, 0x23],
    "Âøó": [0x8E, 0x24],
    "Áåé": [0x8E, 0x25],
    "Êå°": [0x8E, 0x26],
    "Â∏ê": [0x8E, 0x27],
    "Èöî": [0x8E, 0x28],
    "Á©¥": [0x8E, 0x29],
    "Âñâ": [0x8E, 0x2A],
    "ÈîÄ": [0x8E, 0x2B],
    "Èºì": [0x8E, 0x2C],
    "Âó§": [0x8E, 0x2D],
    "Êê≠": [0x8E, 0x2E],
    "Â∞∏": [0x8E, 0x2F],
    "Áôª": [0x8E, 0x30],
    "Ëô´": [0x8F, 0x01],
    "ÁÉ≠": [0x8F, 0x02],
    "Êô∂": [0x8F, 0x03],
    "‰ª¨": [0x8F, 0x04],
    "Ëµû": [0x8F, 0x05],
    "ÂÖ∂": [0x8F, 0x06],
    "Âä©": [0x8F, 0x07],
    "Ëµå": [0x8F, 0x08],
    "È¢Ü": [0x8F, 0x09],
    "Âø´": [0x8F, 0x0A],
    "Á≤æ": [0x8F, 0x0B],
    "Áä∂": [0x8F, 0x0C],
    "ËØØ": [0x8F, 0x0D],
    "Áù°": [0x8F, 0x0E],
    "Âèñ": [0x8F, 0x0F],
    "ÂÅ∑": [0x8F, 0x10],
    "ÊµÅ": [0x8F, 0x11],
    "ÊΩú": [0x8F, 0x12],
    "ÈÇª": [0x8F, 0x13],
    "ÊÑß": [0x8F, 0x14],
    "Âãí": [0x8F, 0x15],
    "È¶ô": [0x8F, 0x16],
    "Ëé∑": [0x8F, 0x17],
    "Ê≤π": [0x8F, 0x18],
    "‰Ωì": [0x8F, 0x19],
    "Áª™": [0x8F, 0x1A],
    "Âêµ": [0x8F, 0x1B],
    "Ê•ö": [0x8F, 0x1C],
    "Ë¥™": [0x8F, 0x1D],
    "‰π°": [0x8F, 0x1E],
    "ÊóÅ": [0x8F, 0x1F],
    "Êôì": [0x8F, 0x20],
    "Ë∫∫": [0x8F, 0x21],
    "Áã≠": [0x8F, 0x22],
    "ÂÆ°": [0x8F, 0x23],
    "Á¶Å": [0x8F, 0x24],
    "Ë∞é": [0x8F, 0x25],
    "Êå®": [0x8F, 0x26],
    "Ê≥•": [0x8F, 0x27],
    "Ê≤Æ": [0x8F, 0x28],
    "Âòª": [0x8F, 0x29],
    "Êìî": [0x8F, 0x2A],
    "Èùì": [0x8F, 0x2B],
    "‰∏´": [0x8F, 0x2C],
    "Âê©": [0x8F, 0x2D],
    "Êù†": [0x8F, 0x2E],
    "ÊùØ": [0x8F, 0x2F],
    "Â±è": [0x8F, 0x30],
}


def check_if_correct_charset(char, cur_charset, filename, lineno):
    warn_msg = f"{filename}:{lineno}: Warning: character '{char}' is present but is completely in a wrong charset currently set. Add {{}} before the character to silence this warning."

    if char == " " or char == "„ÄÄ":
        return -1, cur_charset
    elif char in CHARSET_KANA and cur_charset is not CHARSET_KANA:
        print(warn_msg.format("[Charset Kana]"))
        return 0, CHARSET_KANA
    elif char in CHARSET_LATIN and cur_charset is not CHARSET_LATIN:
        print(warn_msg.format("[Charset Latin]"))
        return 1, CHARSET_LATIN
    elif char in CHARSET_KANJI and cur_charset is not CHARSET_KANJI:
        print(warn_msg.format("[Charset Kanji]"))
        return 2, CHARSET_KANJI
    elif char in CHARSET_BUTTONS and cur_charset is not CHARSET_BUTTONS:
        print(warn_msg.format("[Charset Buttons]"))
        return 3, CHARSET_BUTTONS

    return -1, cur_charset


def strip_c_comments(text):
    def replacer(match):
        s = match.group(0)
        if s.startswith("/"):
            return " "
        else:
            return s

    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE,
    )
    return re.sub(pattern, replacer, text)


if __name__ == "__main__":
    if len(argv) < 3:
        print("usage: parse_compile.py [version] [in.msg] [out.msgpack] [--c]")
        exit(1)

    version = argv[1]
    filename = argv[2]
    outfile = argv[3]
    is_output_format_c = "--c" in argv

    messages = []

    message = None
    with open(filename, "r") as f:
        source = strip_c_comments(f.read())
        lineno = 1

        directive = ""
        indent_level = 0

        if version == "jp":
            charset = CHARSET_KANA
        elif version == "ique":
            charset = CHARSET_IQUE
        else:
            charset = CHARSET_STANDARD
        font_stack = [0]
        sound_stack = [0]
        color_stack = [0x0A]
        fx_stack = []
        style = None
        explicit_end = False
        choiceindex = -1

        while len(source) > 0:
            if source[0] == "\r" or source[0] == "\t":
                source = source[1:]
                continue

            if source[0] == "\n":
                lineno += 1
                source = source[1:]

                for i in range(indent_level):
                    if source[0] == "\t":
                        source = source[1:]
                    else:
                        break

                continue

            if message is None:
                directive = ""
                while source[0] != " ":
                    if source[0] == "\n":
                        lineno += 1
                    elif source[0] == "\r":
                        pass
                    else:
                        directive += source[0]
                    source = source[1:]

                directive = directive.split(":")

                if directive[0] != "#message":
                    print(f"{filename}:{lineno}: expected #message directive")
                    exit(1)
                if is_output_format_c:
                    if len(directive) != 2:
                        print(f"{filename}:{lineno}: expected #message:NAME directive")
                        exit(1)

                    message = Message(directive[1], None, None)
                else:
                    if len(directive) != 3:
                        print(f"{filename}:{lineno}: expected #message:SECTION:INDEX directive")
                        exit(1)

                    section = int(directive[1], 16)

                    if directive[2].startswith("(") and directive[2].endswith(")"):
                        name = directive[2][1:-1]
                        index = None
                    else:
                        name = None
                        index = int(directive[2], 16)

                    directive = ""

                    message = Message(name, section, index)
                messages.append(message)
                font = 0
                if version == "jp":
                    charset = CHARSET_KANA
                elif version == "ique":
                    charset = CHARSET_IQUE
                else:
                    charset = CHARSET_STANDARD

                while source[0] != "{":
                    source = source[1:]

                    if source[0] == "\n":
                        lineno += 1
                    elif source[0] == "\r":
                        pass
                    elif source[0] == "{":
                        break
                    elif source[0] != " " and source[0] != "\t":
                        print(f"{filename}:{lineno}: expected opening brace ('{{')")
                        exit(1)

                source = source[1:]  # {

                # count indent level
                indent_level = 0
                """
                while source[0] == " " or source[0] == "\t" or source[0] == "\n" or source[0] == "\r":
                    if source[0] == " " or source[0] == "\t":
                        indent_level += 1
                    source = source[1:]
                """
            else:
                command, args, named_args, source = parse_command(source)

                if command:
                    if command == "end":
                        message.bytes += [0xFD]
                        explicit_end = True
                    elif command == "raw":
                        message.bytes += [*args]
                    elif command == "br":
                        message.bytes += [0xF0]
                    elif command == "wait":
                        message.bytes += [0xF1]
                    elif command == "pause":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xF2, args[0]]
                    elif command == "next":
                        message.bytes += [0xFB]
                    elif command == "yield":
                        message.bytes += [0xFF, 0x04]
                    elif command == "savecolor":
                        message.bytes += [0xFF, 0x24]
                    elif command == "restorecolor":
                        message.bytes += [0xFF, 0x25]
                    elif command == "color":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: color command requires 1 parameter")
                            exit(1)

                        color = color_to_code(args[0], style)

                        if color is None:
                            print(f"{filename}:{lineno}: unknown color")
                            exit(1)

                        message.bytes += [0xFF, 0x05, color]
                        # color_stack.append(color)
                    # elif command == "/color":
                    #    color_stack.pop()
                    #    message.bytes += [0xFF, 0x05, color_stack[0]]
                    elif command == "style":
                        message.bytes += [0xFC]

                        style = args[0]
                        args = args[1:]
                        if type(style) is int:
                            message.bytes += [style, *args]
                        else:
                            if style == "right":
                                message.bytes += [0x01]
                            elif style == "left":
                                message.bytes += [0x02]
                            elif style == "center":
                                message.bytes += [0x03]
                            elif style == "tattle":
                                message.bytes += [0x04]
                            elif style == "choice":
                                pos = named_args.get("pos")

                                if not isinstance(pos, list) or len(pos) != 2:
                                    print(f"{filename}:{lineno}: 'choice' style requires pos=_,_")
                                    exit(1)

                                size = named_args.get("size")

                                if not isinstance(size, list) or len(size) != 2:
                                    print(f"{filename}:{lineno}: 'choice' style requires size=_,_")
                                    exit(1)

                                message.bytes += [
                                    0x05,
                                    pos[0],
                                    pos[1],
                                    size[0],
                                    size[1],
                                ]
                            elif style == "inspect":
                                message.bytes += [0x06]
                            elif style == "sign":
                                message.bytes += [0x07]
                            elif style == "lamppost":
                                height = named_args.get("height")

                                if not isinstance(height, int):
                                    print(f"{filename}:{lineno}: 'lamppost' style requires height=_")
                                    exit(1)

                                message.bytes += [0x08, height]
                            elif style == "postcard":
                                index = named_args.get("index")

                                if not isinstance(index, int):
                                    print(f"{filename}:{lineno}: 'postcard' style requires index=_")
                                    exit(1)

                                message.bytes += [0x09, index]
                            elif style == "popup":
                                message.bytes += [0x0A]
                            elif style == "popup2":
                                message.bytes += [0x0B]
                            elif style == "upgrade":
                                pos = named_args.get("pos")

                                if not isinstance(pos, list) or len(pos) != 2:
                                    print(f"{filename}:{lineno}: 'upgrade' style requires pos=_,_")
                                    exit(1)

                                size = named_args.get("size")

                                if not isinstance(size, list) or len(size) != 2:
                                    print(f"{filename}:{lineno}: 'upgrade' style requires size=_,_")
                                    exit(1)

                                message.bytes += [
                                    0x0C,
                                    pos[0],
                                    pos[1],
                                    size[0],
                                    size[1],
                                ]
                            elif style == "narrate":
                                message.bytes += [0x0D]
                            elif style == "epilogue":
                                message.bytes += [0x0E]
                    elif command == "font":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: font command requires 1 parameter")
                            exit(1)

                        font = args[0]

                        if font == "standard":
                            font = 0
                        elif font == "menu":
                            font = 1
                        elif font == "menu2":
                            font = 2
                        elif font == "title":
                            font = 3
                        elif font == "subtitle":
                            font = 4

                        if type(font) is not int:
                            print(f"{filename}:{lineno}: unknown font '{font}'")
                            exit(1)

                        message.bytes += [0xFF, 0x00, font]
                        # font_stack.append(font)

                        if font == 3 or font == 4:
                            charset = CHARSET_CREDITS
                        else:
                            if version == "jp":
                                charset = CHARSET_KANA
                            elif version == "ique":
                                charset = CHARSET_IQUE
                            else:
                                charset = CHARSET_STANDARD
                    # elif command == "/font":
                    #     font_stack.pop()
                    #     message.bytes += [0xFF, 0x00, font_stack[0]]

                    #     if font == 3 or font == 4:
                    #         charset = CHARSET_CREDITS
                    #     else:
                    #         charset = CHARSET
                    elif command == "charset":
                        if version != "jp":
                            print(f"{filename}:{lineno}: charset command is only supported in the JP version")
                            exit(1)

                        if len(args) != 1:
                            print(f"{filename}:{lineno}: charset command requires 1 parameter")
                            exit(1)

                        arg_charset = args[0]

                        if arg_charset == "kana":
                            arg_charset = 0
                        elif arg_charset == "latin":
                            arg_charset = 1
                        elif arg_charset == "kanji":
                            arg_charset = 2
                        elif arg_charset == "buttons":
                            arg_charset = 3

                        if type(arg_charset) is not int:
                            print(f"{filename}:{lineno}: unknown charset '{arg_charset}'")
                            exit(1)

                        message.bytes += [0xF3 + arg_charset]

                        if arg_charset == 0:
                            charset = CHARSET_KANA
                        elif arg_charset == 1:
                            charset = CHARSET_LATIN
                        elif arg_charset == 2:
                            charset = CHARSET_KANJI
                        elif arg_charset == 3:
                            charset = CHARSET_BUTTONS

                    elif command == "variant0":
                        message.bytes += [0xF3]

                    elif command == "inputoff":
                        message.bytes += [0xFF, 0x07]
                    elif command == "inputon":
                        message.bytes += [0xFF, 0x08]
                    elif command == "delayoff":
                        message.bytes += [0xFF, 0x09]
                    elif command == "delayon":
                        message.bytes += [0xFF, 0x0A]
                    elif command == "charwidth":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x0B, args[0]]
                    elif command == "scroll":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x0C, args[0]]
                    elif command == "size":
                        args = args[0]

                        if len(args) == 1:
                            args.append(args[0])

                        if len(args) != 2:
                            print(f"{filename}:{lineno}: {command} command requires 2 parameters")
                            exit(1)

                        message.bytes += [0xFF, 0x0D, args[0], args[1]]
                    elif command == "sizereset":
                        message.bytes += [0xFF, 0x0E]
                    elif command == "speed":
                        delay = named_args.get("delay")

                        if not isinstance(delay, int):
                            print(f"{filename}:{lineno}: {command} command requires delay=_")
                            exit(1)

                        chars = named_args.get("chars")

                        if not isinstance(delay, int):
                            print(f"{filename}:{lineno}: {command} command requires chars=_")
                            exit(1)

                        message.bytes += [0xFF, 0x0F, delay, chars]
                    # elif command == "pos":
                    #     if "y" not in named_args:
                    #         print(f"{filename}:{lineno}: pos command requires parameter: y (x is optional)")
                    #         exit(1)

                    #     if "x" in named_args:
                    #         message.bytes += [0xFF, 0x10, named_args["x"], named_args["y"]]
                    #     else:
                    #         message.bytes += [0xFF, 0x11, named_args["y"]]
                    elif command == "setposx":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x10, args[0] >> 8, args[0] & 0xFF]
                    elif command == "setposy":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x11, *args]
                    elif command == "right":
                        if len(args) == 0:
                            if version == "jp":
                                charset_byte, charset = check_if_correct_charset("[right]", charset, filename, lineno)
                                if charset_byte != -1:
                                    message.bytes += [0xF3 + charset_byte]
                                message.bytes += [0xB4]
                            else:
                                message.bytes += [0x95]
                        else:
                            if len(args) != 1:
                                print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                                exit(1)

                            message.bytes += [0xFF, 0x12, args[0]]
                    elif command == "down":
                        if len(args) == 0:
                            if version == "jp":
                                charset_byte, charset = check_if_correct_charset("[down]", charset, filename, lineno)
                                if charset_byte != -1:
                                    message.bytes += [0xF3 + charset_byte]
                                message.bytes += [0xB2]
                            else:
                                message.bytes += [0x93]
                        else:
                            if len(args) != 1:
                                print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                                exit(1)

                            message.bytes += [0xFF, 0x13, args[0]]
                    elif command == "up":
                        if len(args) == 0:
                            if version == "jp":
                                charset_byte, charset = check_if_correct_charset("[up]", charset, filename, lineno)
                                if charset_byte != -1:
                                    message.bytes += [0xF3 + charset_byte]
                                message.bytes += [0xB1]
                            else:
                                message.bytes += [0x92]
                        else:
                            if len(args) != 1:
                                print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                                exit(1)

                            message.bytes += [0xFF, 0x14, args[0]]
                    elif command == "inlineimage":
                        index = named_args.get("index")

                        if not isinstance(index, int):
                            print(f"{filename}:{lineno}: {command} command requires index=_")
                            exit(1)

                        message.bytes += [0xFF, 0x15, index]
                    elif command == "animsprite":
                        spriteid = named_args.get("spriteid")
                        raster = named_args.get("raster")

                        # TODO: named sprite id and raster

                        if not isinstance(spriteid, int):
                            print(f"{filename}:{lineno}: {command} command requires spriteid=_")
                            exit(1)
                        if not isinstance(raster, int):
                            print(f"{filename}:{lineno}: {command} command requires raster=_")
                            exit(1)

                        message.bytes += [
                            0xFF,
                            0x16,
                            spriteid >> 8,
                            spriteid & 0xFF,
                            raster,
                        ]
                    elif command == "itemicon":
                        itemid = named_args.get("itemid")

                        # TODO: itemname

                        if not isinstance(itemid, int):
                            print(f"{filename}:{lineno}: {command} command requires itemid=_")
                            exit(1)

                        message.bytes += [0xFF, 0x17, itemid >> 8, itemid & 0xFF]
                    elif command == "image":
                        index = named_args.get("index")
                        pos = named_args.get("pos")  # xx,y
                        hasborder = named_args.get("hasborder")
                        alpha = named_args.get("alpha")
                        fadeamount = named_args.get("fadeamount")

                        if not isinstance(index, int):
                            print(f"{filename}:{lineno}: {command} command requires index=_")
                            exit(1)
                        if not isinstance(pos, list) or len(pos) != 2:
                            print(f"{filename}:{lineno}: {command} command requires pos=_,_")
                            exit(1)
                        if not isinstance(hasborder, int):
                            print(f"{filename}:{lineno}: {command} command requires hasborder=_")
                            exit(1)
                        if not isinstance(alpha, int):
                            print(f"{filename}:{lineno}: {command} command requires alpha=_")
                            exit(1)
                        if not isinstance(fadeamount, int):
                            print(f"{filename}:{lineno}: {command} command requires fadeamount=_")
                            exit(1)

                        message.bytes += [
                            0xFF,
                            0x18,
                            index,
                            pos[0] >> 8,
                            pos[0] & 0xFF,
                            pos[1],
                            hasborder,
                            alpha,
                            fadeamount,
                        ]
                    elif command == "hideimage":
                        fadeamount = named_args.get("fadeamount", 0)

                        if not isinstance(fadeamount, int):
                            print(f"{filename}:{lineno}: {command} command requires fadeamount=_")
                            exit(1)

                        message.bytes += [0xFF, 0x19, fadeamount]
                    elif command == "animdelay":
                        index = named_args.get("index")
                        delay = named_args.get("delay")

                        if not isinstance(index, int):
                            print(f"{filename}:{lineno}: {command} command requires index=_")
                            exit(1)
                        if not isinstance(delay, int):
                            print(f"{filename}:{lineno}: {command} command requires delay=_")
                            exit(1)

                        message.bytes += [0xFF, 0x1A, 0, index, delay]
                    elif command == "animloop":
                        if len(args) != 2:
                            print(f"{filename}:{lineno}: {command} command requires 2 parameters")
                            exit(1)
                        message.bytes += [0xFF, 0x1B, args[0], args[1]]
                    elif command == "animdone":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)
                        message.bytes += [0xFF, 0x1C, args[0]]
                    elif command == "setcursorpos":
                        index = named_args.get("index")
                        pos = named_args.get("pos")

                        if not isinstance(index, int):
                            print(f"{filename}:{lineno}: {command} command requires index=_")
                            exit(1)
                        if not isinstance(pos, list) or len(pos) != 2:
                            print(f"{filename}:{lineno}: {command} command requires pos=_,_")
                            exit(1)

                        message.bytes += [0xFF, 0x1D, index, pos, pos]
                    elif command == "cursor":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: cursor command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x1E, *args]
                    elif command == "option" and choiceindex == -1:
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: option command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x21, *args]
                    elif command == "endchoice" and choiceindex == -1:
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x1F, args[0]]
                    elif command == "setcancel":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x20, args[0]]
                    # elif command == "startfx":
                    #     message.bytes += [0xFF, 0x26, resolve_effect(args[0]), *args[1:]]
                    # elif command == "endfx":
                    #     message.bytes += [0xFF, 0x27, resolve_effect(args[0]), *args[1:]]
                    elif command == "/fx":
                        message.bytes += [0xFF, 0x27, fx_stack.pop()]
                    elif command == "shake":
                        fx_stack.append(0x00)
                        message.bytes += [0xFF, 0x26, 0x00]
                    elif command == "/shake":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x00]
                    elif command == "wave":
                        fx_stack.append(0x01)
                        message.bytes += [0xFF, 0x26, 0x01]
                    elif command == "/wave":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x01]
                    elif command == "noiseoutline":
                        fx_stack.append(0x02)
                        message.bytes += [0xFF, 0x26, 0x02]
                    elif command == "/noiseoutline":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x02]
                    elif command == "static":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        fx_stack.append(0x03)
                        message.bytes += [0xFF, 0x26, 0x03, args[0]]
                    elif command == "/static":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x03]
                    elif command == "blur":
                        _dir = named_args.get("dir")

                        if _dir == "x":
                            _dir = 0
                        elif _dir == "y":
                            _dir = 1
                        elif _dir == "xy":
                            _dir = 2

                        if not isinstance(_dir, int):
                            print(f"{filename}:{lineno}: {command} command requires dir=_")
                            exit(1)

                        fx_stack.append(0x05)
                        message.bytes += [0xFF, 0x26, 0x05, _dir]
                    elif command == "/blur":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x05]
                    elif command == "rainbow":
                        fx_stack.append(0x06)
                        message.bytes += [0xFF, 0x26, 0x06]
                    elif command == "/rainbow":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x06]
                    elif command == "ditherfade":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        fx_stack.append(0x07)
                        message.bytes += [0xFF, 0x26, 0x07, args[0]]
                    elif command == "/ditherfade":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x07]
                    elif command == "printrising":
                        fx_stack.append(0x0A)
                        message.bytes += [0xFF, 0x26, 0x0A]
                    elif command == "/printrising":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x0A]
                    elif command == "printgrowing":
                        fx_stack.append(0x0B)
                        message.bytes += [0xFF, 0x26, 0x0B]
                    elif command == "/printgrowing":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x0B]
                    elif command == "sizejitter":
                        fx_stack.append(0x0C)
                        message.bytes += [0xFF, 0x26, 0x0C]
                    elif command == "/sizejitter":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x0C]
                    elif command == "sizewave":
                        fx_stack.append(0x0D)
                        message.bytes += [0xFF, 0x26, 0x0D]
                    elif command == "/sizewave":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x0D]
                    elif command == "dropshadow":
                        fx_stack.append(0x0E)
                        message.bytes += [0xFF, 0x26, 0x0E]
                    elif command == "/dropshadow":
                        fx_stack.pop()
                        message.bytes += [0xFF, 0x27, 0x0E]
                    elif command == "var":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: var command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x28, *args]
                    elif command == "centerx":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x29, *args]
                    elif command == "rewindoff":
                        message.bytes += [0xFF, 0x2A, 0]
                    elif command == "rewindon":
                        message.bytes += [0xFF, 0x2A, 1]
                    elif command == "customvoice":
                        soundids = named_args.get("soundids")

                        if not isinstance(soundids, list) or len(pos) != 2:
                            print(f"{filename}:{lineno}: {command} command requires soundids=_,_")
                            exit(1)

                        message.bytes += [
                            0xFF,
                            0x2C,
                            soundids[0] >> 24,
                            (soundids[0] >> 16) & 0xFF,
                            (soundids[0] >> 8) & 0xFF,
                            soundids[0] & 0xFF,
                            soundids[1] >> 24,
                            (soundids[1] >> 16) & 0xFF,
                            (soundids[1] >> 8) & 0xFF,
                            soundids[1] & 0xFF,
                        ]
                    elif command == "volume":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        message.bytes += [0xFF, 0x2E, *args]
                    elif command == "voice":
                        if len(args) != 1:
                            print(f"{filename}:{lineno}: {command} command requires 1 parameter")
                            exit(1)

                        sound = args[0]

                        if sound == "normal":
                            sound = 0
                        elif sound == "bowser":
                            sound = 1
                        elif sound == "star" or sound == "spirit":
                            sound = 2

                        if type(sound) is not int:
                            print(f"{filename}:{lineno}: unknown voice '{sound}'")
                            exit(1)

                        message.bytes += [0xFF, 0x2F, sound]
                        # sound_stack.append(sound)
                    # elif command == "/sound":
                    #     sound_stack.pop()
                    #     message.bytes += [0xFF, 0x2F, sound_stack[0]]
                    elif command == "a":
                        color_code = color_to_code("blue", "button")
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x00,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x98,
                                0xFF,
                                0x25,
                            ]
                    elif command == "b":
                        color_code = color_to_code(
                            named_args.get("color", "green"),
                            named_args.get("ctx", "button"),
                        )
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x01,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x99,
                                0xFF,
                                0x25,
                            ]
                    elif command == "l":
                        color_code = color_to_code(
                            named_args.get("color", "gray"),
                            named_args.get("ctx", "button"),
                        )
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x08,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x9A,
                                0xFF,
                                0x25,
                            ]
                    elif command == "r":
                        color_code = color_to_code(
                            named_args.get("color", "gray"),
                            named_args.get("ctx", "button"),
                        )
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x09,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x9B,
                                0xFF,
                                0x25,
                            ]
                    elif command == "z":
                        color_code = color_to_code("grey", "button")
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x07,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x9C,
                                0xFF,
                                0x25,
                            ]
                    elif command == "c-up":
                        color_code = color_to_code(
                            named_args.get("color", "yellow"),
                            named_args.get("ctx", "button"),
                        )
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x03,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x9D,
                                0xFF,
                                0x25,
                            ]
                    elif command == "c-down":
                        color_code = color_to_code(
                            named_args.get("color", "yellow"),
                            named_args.get("ctx", "button"),
                        )
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x04,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x9E,
                                0xFF,
                                0x25,
                            ]
                    elif command == "c-left":
                        color_code = color_to_code(
                            named_args.get("color", "yellow"),
                            named_args.get("ctx", "button"),
                        )
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x05,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0x9F,
                                0xFF,
                                0x25,
                            ]
                    elif command == "c-right":
                        color_code = color_to_code(
                            named_args.get("color", "yellow"),
                            named_args.get("ctx", "button"),
                        )
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x06,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xA0,
                                0xFF,
                                0x25,
                            ]
                    elif command == "start":
                        color_code = color_to_code(
                            named_args.get("color", "red"),
                            named_args.get("ctx", "button"),
                        )  #
                        assert color_code is not None
                        if version == "jp":
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xF6,
                                0x02,
                                0xFF,
                                0x25,
                            ]
                        else:
                            message.bytes += [
                                0xFF,
                                0x24,
                                0xFF,
                                0x05,
                                color_code,
                                0xA1,
                                0xFF,
                                0x25,
                            ]
                    elif command == "~a":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~a]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x00]
                        else:
                            message.bytes += [0x98]
                    elif command == "~b":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~b]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x01]
                        else:
                            message.bytes += [0x99]
                    elif command == "~l":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~l]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x08]
                        else:
                            message.bytes += [0x9A]
                    elif command == "~r":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~r]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x09]
                        else:
                            message.bytes += [0x9B]
                    elif command == "~z":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~z]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x07]
                        else:
                            message.bytes += [0x9C]
                    elif command == "~c-up":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~c-up]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x03]
                        else:
                            message.bytes += [0x9D]
                    elif command == "~c-down":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~c-down]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x04]
                        else:
                            message.bytes += [0x9E]
                    elif command == "~c-left":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~c-left]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x05]
                        else:
                            message.bytes += [0x9F]
                    elif command == "~c-right":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~c-right]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x06]
                        else:
                            message.bytes += [0xA0]
                    elif command == "~start":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[~start]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x02]
                        else:
                            message.bytes += [0xA1]
                    elif command == "note":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[note]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x6A]
                        else:
                            message.bytes += [0x00]
                    elif command == "heart":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[heart]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0xBD]
                        else:
                            message.bytes += [0x90]
                    elif command == "star":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[star]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0xBE]
                        else:
                            message.bytes += [0x91]
                    elif command == "left":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[left]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0xB3]
                        else:
                            message.bytes += [0x94]
                    elif command == "circle":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[circle]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x61]
                        else:
                            message.bytes += [0x96]
                    elif command == "cross":
                        if version == "jp":
                            charset_byte, charset = check_if_correct_charset("[cross]", charset, filename, lineno)
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0x62]
                        else:
                            message.bytes += [0x97]
                    elif command == "katakana":
                        if version != "jp":
                            print(f"{filename}:{lineno}: Command katakana is only supported in the JP version")
                            exit(1)

                        kana_char = args[0]

                        if kana_char == "smalln":
                            charset_byte, charset = check_if_correct_charset(
                                "[katakana smalln]", charset, filename, lineno
                            )
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0xC5]
                        else:
                            print(f"{filename}:{lineno}: Invalid or unimplemented katakana character name {kana_char}")
                            exit(1)
                    elif command == "hiragana":
                        if version != "jp":
                            print(f"{filename}:{lineno}: Command hiragana is only supported in the JP version")
                            exit(1)

                        kana_char = args[0]

                        if kana_char == "smalln":
                            charset_byte, charset = check_if_correct_charset(
                                "[hiragana smalln]", charset, filename, lineno
                            )
                            if charset_byte != -1:
                                message.bytes += [0xF3 + charset_byte]
                            message.bytes += [0xC4]
                        else:
                            print(f"{filename}:{lineno}: Invalid or unimplemented hiragana character name {kana_char}")
                            exit(1)
                    elif command == "fullspace":
                        message.bytes += [0xF8]
                    elif command == "halfspace":
                        message.bytes += [0xF9]
                    elif command == "savepos":
                        message.bytes += [0xFF, 0x22]
                    elif command == "restorepos":
                        message.bytes += [0xFF, 0x23]
                    elif command == "enablecdownnext":
                        message.bytes += [0xFF, 0x2B]
                    elif command == "beginchoice":
                        choiceindex = 0
                        message.bytes += [0xFF, 0x09]  # delayoff
                    elif command == "option" and choiceindex >= 0:
                        message.bytes += [0xFF, 0x1E, choiceindex]  # cursor n
                        message.bytes += [0xFF, 0x21, choiceindex]  # option n
                        choiceindex += 1
                    elif command == "endchoice" and choiceindex >= 0:
                        cancel = named_args.get("cancel")

                        message.bytes += [0xFF, 0x21, 255]  # option 255
                        message.bytes += [0xFF, 0x0A]  # delayon

                        if isinstance(cancel, int):
                            message.bytes += [0xFF, 0x20, cancel]  # setcancel n

                        message.bytes += [0xFF, 0x1F, choiceindex]  # endchoice n

                        choiceindex = -1
                    elif command == "animation" and choiceindex >= 0:
                        # TODO
                        print(f"{filename}:{lineno}: '{command}' tag is not yet implemented")
                        exit(1)
                    else:
                        print(f"{filename}:{lineno}: unknown command '{command}'")
                        exit(1)
                else:
                    if source[0] == "}":
                        if not explicit_end:
                            print(f"{filename}:{lineno}: warning: string lacks an [end] command")
                            # message.bytes += [0xFD]
                        explicit_end = False

                        # sanity check
                        for b in message.bytes:
                            if not isinstance(b, int):
                                print(b)

                        # padding
                        while len(message.bytes) % 4 != 0:
                            message.bytes += [0x00]

                        message = None
                        source = source[1:]  # }
                        indent_level = 0
                        choiceindex = -1
                        continue

                    if source[0] == "\\":
                        source = source[1:]

                    if version == "jp" and charset is not CHARSET_CREDITS:
                        charset_byte, charset = check_if_correct_charset(source[0], charset, filename, lineno)
                        if charset_byte != -1:
                            message.bytes += [0xF3 + charset_byte]
                        elif (
                            source[0] not in CHARSET_KANA
                            and source[0] not in CHARSET_LATIN
                            and source[0] not in CHARSET_KANJI
                            and source[0] not in CHARSET_BUTTONS
                        ):
                            print(f"{filename}:{lineno}: unsupported character '{source[0]}' for current font")
                            exit(1)

                        data = charset[source[0]]

                        if type(data) is int:
                            message.bytes.append(data)
                        else:
                            message.bytes += data

                        source = source[1:]
                    else:
                        if source[0] in charset:
                            data = charset[source[0]]

                            if type(data) is int:
                                message.bytes.append(data)
                            else:
                                message.bytes += data

                            source = source[1:]
                        else:
                            print(f"{filename}:{lineno}: unsupported character '{source[0]}' for current font")
                            exit(1)

        if message != None:
            print(f"{filename}: missing [end]")
            exit(1)

    if is_output_format_c:
        with open(outfile, "w") as f:
            f.write(f"#include <ultra64.h>\n")

            for message in messages:
                f.write(f"static s8 {message.name}[] = {{\n")
                for b in message.bytes:
                    f.write(f"0x{b:02X},")
                f.write(f"\n}};\n")

    else:
        with open(outfile, "wb") as f:
            msgpack.pack(
                [
                    {
                        "section": message.section,
                        "index": message.index,
                        "name": message.name,
                        "bytes": bytes(message.bytes),
                    }
                    for message in messages
                ],
                f,
            )
